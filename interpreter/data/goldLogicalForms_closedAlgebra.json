[
    {
        "id": 10000,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- a 5) 0))",
            "(assert (Not (= ?_id_7_8 (+ a 5))))",
            "(assert (MenuItem \"A\" (- 0 10)))",
            "(assert (MenuItem \"B\" (- 0 5)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 10))"
        ]
    },
    {
        "id": 10008,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_23_24 (- (Pow 4 2) (- (Pow 3 2) 2)))))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 9))",
            "(assert (MenuItem \"C\" 15))",
            "(assert (MenuItem \"D\" 24))",
            "(assert (MenuItem \"E\" 40))"
        ]
    },
    {
        "id": 10011,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 14 (+ x (* 2 y))))",
            "(assert (= _id_22_26 x))",
            "(assert (= y (+ z 2)))",
            "(assert (= z 4))",
            "(assert (Not (= ?_id_20_21 _id_22_26)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 10))"
        ]
    },
    {
        "id": 10021,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Increasing (Elements (* 3 x) 0 y)))",
            "(assert (Not (= ?_id_8_12 (Max (ForwardReference _id_10_12 (Slots) (Slots (Slot \"num\" \"plural\")))))))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" y))",
            "(assert (MenuItem \"C\" (- 0 (* 3 x))))",
            "(assert (MenuItem \"D\" (- 0 (+ (* 3 x) y))))",
            "(assert (MenuItem \"E\" (- 0 (- (* 3 x) y))))"
        ]
    },
    {
        "id": 10027,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (/ 1 36) (Pow x (- 0 (/ 2 3)))))",
            "(assert (= x ?_id_23_24))",
            "(assert (MenuItem \"A\" (- 0 6)))",
            "(assert (MenuItem \"B\" (/ 1 6)))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 18))",
            "(assert (MenuItem \"E\" 216))"
        ]
    },
    {
        "id": 10031,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= r (- 0 2)))",
            "(assert (= s 5))",
            "(assert (Not (= ?_id_10_11 (* (Pow r 2) (+ (* 2 r) s)))))",
            "(assert (MenuItem \"A\" (- 0 36)))",
            "(assert (MenuItem \"B\" (- 0 28)))",
            "(assert (MenuItem \"C\" (- 0 4)))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 10035,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_0_1 (Min _gen10)))",
            "(assert (GreaterThan (* (/ 40 100) (Min _gen10)) 2.8))",
            "(assert (HasPrototype _gen10 _gen2))",
            "(assert (IsInteger _gen2))",
            "(assert (IsPrototype _gen38 _gen3))",
            "(assert (MemberOf _gen2 _gen3))"
        ]
    },
    {
        "id": 10039,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ pq (+ p q)) (/ pq (+ (/ 1 p) (/ 1 q)))))",
            "(assert (= pq (* (/ 1 p) (/ 1 q))))",
            "(assert (= pq (* p q)))",
            "(assert (Not (True ?_id_47_51)))",
            "(assert (MenuItem \"A\" (= p (+ q 1))))",
            "(assert (MenuItem \"B\" (= p q)))",
            "(assert (MenuItem \"C\" (= p (- 0 q))))",
            "(assert (MenuItem \"D\" (= pq 1)))",
            "(assert (MenuItem \"E\" (= pq (+ p q))))"
        ]
    },
    {
        "id": 10042,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (/ 125 100) x) 150))",
            "(assert (Not (= ?_id_8_9 (* (/ x 100) 75))))",
            "(assert (MenuItem \"A\" 70))",
            "(assert (MenuItem \"B\" 90))",
            "(assert (MenuItem \"C\" 120))",
            "(assert (MenuItem \"D\" 150))",
            "(assert (MenuItem \"E\" 185))"
        ]
    },
    {
        "id": 10043,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (GreaterThan p 0))",
            "(assert (Not (= (* (/ 5 100) (* (/ 7 100) (* 4 p))) (* (/ ?_id_0 100) p))))",
            "(assert (MenuItem \"A\" 14))",
            "(assert (MenuItem \"B\" 7))",
            "(assert (MenuItem \"C\" 1.4))",
            "(assert (MenuItem \"D\" 0.14))",
            "(assert (MenuItem \"E\" 0.07))"
        ]
    },
    {
        "id": 10049,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Increasing (Elements a b c 0)))",
            "(assert (Not (True ?_id_9_13)))",
            "(assert (MenuItem \"I\" (< (- a b) c)))",
            "(assert (MenuItem \"II\" (GreaterThan (- 0 a) (- 0 c))))",
            "(assert (MenuItem \"III\" (< (+ a b) (+ b c))))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"III\"))",
            "(assert (ComboItem \"C\" \"I\"))",
            "(assert (ComboItem \"C\" \"II\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"D\" \"III\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10052,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* 3 (Pow x (/ 1 2))) (/ (+ (+ (* 2 x) (* 10 (Pow x (/ 1 2)))) 12) (+ (Pow x (/ 1 2)) 3))))",
            "(assert (= ?_id_29_30 x))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 4))",
            "(assert (MenuItem \"D\" 9))",
            "(assert (MenuItem \"E\" 16))"
        ]
    },
    {
        "id": 10053,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (< _gen180 3.481))",
            "(assert (= ?_id_29_30 (- (Min _gen169) (Max _gen182))))",
            "(assert (Even _gen180))",
            "(assert (GreaterThan _gen167 (- 0 1.32)))",
            "(assert (HasPrototype _gen169 _gen167))",
            "(assert (HasPrototype _gen182 _gen180))",
            "(assert (IsInteger _gen167))",
            "(assert (IsInteger _gen180))",
            "(assert (IsPrototype _gen184 _gen161))",
            "(assert (IsPrototype _gen185 _gen174))",
            "(assert (MemberOf _gen167 _gen161))",
            "(assert (MemberOf _gen180 _gen174))",
            "(assert (Prime _gen167))"
        ]
    },
    {
        "id": 10059,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Average (Elements x y z)) 10))",
            "(assert (= (Average (Elements x y)) 7))",
            "(assert (= _id_28_32 z))",
            "(assert (Not (= ?_id_26_27 _id_28_32)))",
            "(assert (MenuItem \"A\" 23))",
            "(assert (MenuItem \"B\" 17))",
            "(assert (MenuItem \"C\" 16))",
            "(assert (MenuItem \"D\" 11))",
            "(assert (MenuItem \"E\" 3))"
        ]
    },
    {
        "id": 10060,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 5.6 (+ (* 0.4 x) 2)))",
            "(assert (= _id_10_14 x))",
            "(assert (Not (= ?_id_8_9 _id_10_14)))",
            "(assert (MenuItem \"A\" 0.9))",
            "(assert (MenuItem \"B\" 1.4))",
            "(assert (MenuItem \"C\" 9))",
            "(assert (MenuItem \"D\" 14))",
            "(assert (MenuItem \"E\" 90))"
        ]
    },
    {
        "id": 10063,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (GreaterThan (* (* (Pow a (- 0 2)) (Pow b 2)) (Pow c 2)) (* (* (Pow a (- 0 3)) (Pow b 3)) (Pow c 2))))",
            "(assert (Not (True ?_id_36_40)))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (Positive c))",
            "(assert (MenuItem \"I\" (GreaterThan a b)))",
            "(assert (MenuItem \"II\" (GreaterThan a c)))",
            "(assert (MenuItem \"III\" (GreaterThan b c)))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"III\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10066,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_0_4 (= (- (Product (Elements 3 b)) 12) 9))))",
            "(assert (MenuItem \"A\" (= (* 3 (- b 12)) 9)))",
            "(assert (MenuItem \"B\" (= (- 12 (* 3 b)) 9)))",
            "(assert (MenuItem \"C\" (= (- (* 3 b) 12) 9)))",
            "(assert (MenuItem \"D\" (= (- (* 12 b) 3) 9)))",
            "(assert (MenuItem \"E\" (= (+ 12 (* 3 b)) 9)))"
        ]
    },
    {
        "id": 10070,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= x (- 0 5)))",
            "(assert (Not (= ?_id_0_1 (- (- (* 2 (Pow x 2)) (* 3 x)) 7))))",
            "(assert (MenuItem \"A\" 28))",
            "(assert (MenuItem \"B\" 42))",
            "(assert (MenuItem \"C\" 58))",
            "(assert (MenuItem \"D\" 78))",
            "(assert (MenuItem \"E\" 108))"
        ]
    },
    {
        "id": 10079,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= cd (* c d)))",
            "(assert (Distinct c))",
            "(assert (Distinct d))",
            "(assert (IsInteger c))",
            "(assert (IsInteger d))",
            "(assert (Negative c))",
            "(assert (Negative d))",
            "(assert (Not (< ?_id_10_14 cd)))",
            "(assert (SizeIs (Elements c d) 2))",
            "(assert (MenuItem \"A\" (+ cd 1)))",
            "(assert (MenuItem \"B\" (Pow (- 0 cd) 2)))",
            "(assert (MenuItem \"C\" (* d (- c 2))))",
            "(assert (MenuItem \"D\" (* (- c 1) (- d 1))))",
            "(assert (MenuItem \"E\" (* (+ c 1) (+ d 1))))"
        ]
    },
    {
        "id": 10085,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* 7 a) (* 91 13)))",
            "(assert (= ?_id_10_11 (Pow a (/ 1 2))))"
        ]
    },
    {
        "id": 10088,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 26 (+ (* 4 x) 2)))",
            "(assert (Not (= (+ (* 4 x) 8) ?_id_0)))",
            "(assert (MenuItem \"A\" 32))",
            "(assert (MenuItem \"B\" 34))",
            "(assert (MenuItem \"C\" 36))",
            "(assert (MenuItem \"D\" 38))",
            "(assert (MenuItem \"E\" 40))"
        ]
    },
    {
        "id": 10094,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (* 6 (/ a b)) 3) 21))",
            "(assert (Not (= ?_id_14_15 (/ a b))))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 10095,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Increasing (Elements a b 0 c)))",
            "(assert (Not (True ?_id_9_13)))",
            "(assert (MenuItem \"I\" (GreaterThan (- 0 b) (- 0 a))))",
            "(assert (MenuItem \"II\" (< (+ a c) (+ b c))))",
            "(assert (MenuItem \"III\" (< (+ a b) c)))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"D\" \"III\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10104,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (IsInteger k))",
            "(assert (Not (= ?_id_7_11 (+ (+ (Pow 3 k) (Pow 3 k)) (Pow 3 k)))))",
            "(assert (Positive k))",
            "(assert (MenuItem \"A\" (Pow 3 (* 3 k))))",
            "(assert (MenuItem \"B\" (Pow 3 (+ k 2))))",
            "(assert (MenuItem \"C\" (Pow 3 (+ k 1))))",
            "(assert (MenuItem \"D\" (Pow 9 (* 2 k))))",
            "(assert (MenuItem \"E\" (Pow 9 (* 3 k))))"
        ]
    },
    {
        "id": 10107,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Average (Elements 7 20 x)) 20))",
            "(assert (= _id_18_22 x))",
            "(assert (Not (= ?_id_16_17 _id_18_22)))",
            "(assert (MenuItem \"A\" 20))",
            "(assert (MenuItem \"B\" 27))",
            "(assert (MenuItem \"C\" 32))",
            "(assert (MenuItem \"D\" 33))",
            "(assert (MenuItem \"E\" 40))"
        ]
    },
    {
        "id": 10108,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- (* 4 (+ x y)) (* 2 (+ x y))) 12))",
            "(assert (Not (= (+ x y) ?_id_0)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 10))"
        ]
    },
    {
        "id": 10109,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= pq (* p q)))",
            "(assert (Increasing (Elements p q 0)))",
            "(assert (Not (< ?_id_7_11 (/ p q))))",
            "(assert (MenuItem \"A\" (- 0 p)))",
            "(assert (MenuItem \"B\" (- 0 q)))",
            "(assert (MenuItem \"C\" pq))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" 1))"
        ]
    },
    {
        "id": 10112,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= x (- (* 2 y) 5)))",
            "(assert (= z (* 16 (Pow y 3))))",
            "(assert (Not (= ?_id_15_16 z)))",
            "(assert (MenuItem \"A\" (/ (Pow (+ x 5) 3) 2)))",
            "(assert (MenuItem \"B\" (Pow (/ (+ x 5) 2) 3)))",
            "(assert (MenuItem \"C\" (* 2 (Pow (+ x 5) 3))))",
            "(assert (MenuItem \"D\" (* 4 (Pow (+ x 5) 3))))",
            "(assert (MenuItem \"E\" (* 8 (Pow (+ x 5) 3))))"
        ]
    },
    {
        "id": 10115,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= _id_15_19 y))",
            "(assert (= x (+ 5 y)))",
            "(assert (= x (- 5 y)))",
            "(assert (Not (= ?_id_13_14 _id_15_19)))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" (/ 1 2)))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" (/ 3 2)))",
            "(assert (MenuItem \"E\" 5))"
        ]
    },
    {
        "id": 10124,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (+ (* 3 a) (* 3 b)) c) 26))",
            "(assert (= (+ a b) 6))",
            "(assert (Not (= c ?_id_0)))",
            "(assert (MenuItem \"A\" 8))",
            "(assert (MenuItem \"B\" 14))",
            "(assert (MenuItem \"C\" 20))",
            "(assert (MenuItem \"D\" 32))",
            "(assert (MenuItem \"E\" 44))"
        ]
    },
    {
        "id": 10128,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (+ (* 2 (Pow (* 4 (Pow n 2)) (/ 1 2))) 7) 39))",
            "(assert (= ?_id_14_15 n))",
            "(assert (MenuItem \"A\" 8))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" (* 2 (Pow 2 (/ 1 2)))))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" (Pow 2 (/ 1 2))))"
        ]
    },
    {
        "id": 10129,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (Pow a 2) (* 2 3)) (* 6 49)))",
            "(assert (Not (= ?_id_17_18 (Pow a 2))))",
            "(assert (MenuItem \"A\" (Pow 6 2)))",
            "(assert (MenuItem \"B\" (Pow 7 2)))",
            "(assert (MenuItem \"C\" (Pow 13 2)))",
            "(assert (MenuItem \"D\" (Pow 24 2)))",
            "(assert (MenuItem \"E\" (Pow 42 2)))"
        ]
    },
    {
        "id": 10133,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Elements a b) (Elements 4 2)))",
            "(assert (= ab (* a b)))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (Not (= ?_id_26_27 (Mod ab 7))))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 10139,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Abs (- (* 3 x) 6)) 36))",
            "(assert (= ?_id_10_11 x))",
            "(assert (MenuItem \"A\" (- 0 30)))",
            "(assert (MenuItem \"B\" (- 0 14)))",
            "(assert (MenuItem \"C\" (- 0 10)))",
            "(assert (MenuItem \"D\" 0))",
            "(assert (MenuItem \"E\" 10))"
        ]
    },
    {
        "id": 10143,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_20_21 x))",
            "(assert (Between x 300 400))",
            "(assert (DivisibleBy x 3))",
            "(assert (DivisibleBy x 6))",
            "(assert (DivisibleBy x 9))",
            "(assert (IsInteger x))"
        ]
    },
    {
        "id": 10149,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 24 (* 4 (+ x 5))))",
            "(assert (= _id_13_17 x))",
            "(assert (Not (= ?_id_11_12 _id_13_17)))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" (/ 19 4)))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" (/ 29 4)))",
            "(assert (MenuItem \"E\" 19))"
        ]
    },
    {
        "id": 10157,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (+ x 4) (Median (Elements (- (* 2 x) 8) (+ x 4) (- (* 3 x) 13)))))",
            "(assert (= ?_id_30_34 x))",
            "(assert (IsInteger (+ x 4)))",
            "(assert (IsInteger (- (* 2 x) 8)))",
            "(assert (IsInteger (- (* 3 x) 13)))",
            "(assert (MenuItem \"A\" 6))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 11))",
            "(assert (MenuItem \"D\" 13))",
            "(assert (MenuItem \"E\" 15))"
        ]
    },
    {
        "id": 10158,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< y 0))",
            "(assert (= 0 (* (+ x 2) (- y 4))))",
            "(assert (Not (= x ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 10160,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_26_27 (- (* 3 (Pow (+ (* 2 (Pow 3 2)) 7) (/ 1 2))) 8))))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 7))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 10164,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (- 0 7) (* 2 k)) (+ (* 5 k) 8)))",
            "(assert (Not (= ?_id_12_13 (* 3 k))))",
            "(assert (MenuItem \"A\" (- 0 15)))",
            "(assert (MenuItem \"B\" (- 0 5)))",
            "(assert (MenuItem \"C\" (/ (- 0 15) 7)))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 15))"
        ]
    },
    {
        "id": 10165,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= ts (* t s)))",
            "(assert (Increasing (Elements ts 0 (- t s))))",
            "(assert (Not (True ?_id_14_18)))",
            "(assert (True (Increasing (Elements ts 0 (- t s)))))",
            "(assert (MenuItem \"A\" (GreaterThan t s)))",
            "(assert (MenuItem \"B\" (GreaterThan s t)))",
            "(assert (MenuItem \"C\" (= t s)))",
            "(assert (MenuItem \"D\" (And (GreaterThan t 0) (GreaterThan s 0))))",
            "(assert (MenuItem \"E\" (And (< t 0) (< s 0))))"
        ]
    },
    {
        "id": 10166,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 37 (+ (* 4 c) (* 3 d))))",
            "(assert (= ?_id_15_16 c))",
            "(assert (= d (+ c 3)))"
        ]
    },
    {
        "id": 10175,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 2 (Mod k 3)))",
            "(assert (= 3 (Mod k 5)))",
            "(assert (= ?_id_42_43 k))",
            "(assert (= _id_0_4 k))",
            "(assert (Between _id_0_4 50 90))",
            "(assert (DivisibleBy _id_0_4 4))",
            "(assert (IsInteger _id_0_4))",
            "(assert (Positive _id_0_4))"
        ]
    },
    {
        "id": 10186,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (- (* 5 8) (/ 8 2)) ?_id_0)))",
            "(assert (MenuItem \"A\" 36))",
            "(assert (MenuItem \"B\" 38))",
            "(assert (MenuItem \"C\" 40))",
            "(assert (MenuItem \"D\" 45))",
            "(assert (MenuItem \"E\" 48))"
        ]
    },
    {
        "id": 10189,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= n ?_id_17_21))",
            "(assert (Increasing (Elements n 3 (/ 1 n))))",
            "(assert (MenuItem \"A\" 5))",
            "(assert (MenuItem \"B\" 1))",
            "(assert (MenuItem \"C\" (/ 1 3)))",
            "(assert (MenuItem \"D\" (/ 1 5)))",
            "(assert (MenuItem \"E\" (- 0 (/ 1 5))))"
        ]
    },
    {
        "id": 10190,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ 2 (+ x 2)) (/ (* 2 x) (+ (Pow x 2) 1))))",
            "(assert (= _id_26_30 x))",
            "(assert (Not (= ?_id_24_25 _id_26_30)))",
            "(assert (MenuItem \"A\" (- 0 (/ 1 4))))",
            "(assert (MenuItem \"B\" (/ 1 4)))",
            "(assert (MenuItem \"C\" (/ 1 2)))",
            "(assert (MenuItem \"D\" 0))",
            "(assert (MenuItem \"E\" 2))"
        ]
    },
    {
        "id": 10192,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_0_1 (* (/ 50 100) (* (/ 50 100) 50)))))",
            "(assert (MenuItem \"A\" 0.125))",
            "(assert (MenuItem \"B\" 0.5))",
            "(assert (MenuItem \"C\" 1.25))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 12.5))"
        ]
    },
    {
        "id": 10193,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (/ 1 3) c) (+ (* 6 (Pow b 2)) 2)))",
            "(assert (= (* 2 a) (* 3 b)))",
            "(assert (GreaterThan b 0))",
            "(assert (Not (= ?_id_28_29 c)))",
            "(assert (MenuItem \"A\" (+ (* 8 (Pow a 2)) 6)))",
            "(assert (MenuItem \"B\" (+ (* 8 (Pow a 2)) 12)))",
            "(assert (MenuItem \"C\" (+ (* 12 (Pow a 2)) 6)))",
            "(assert (MenuItem \"D\" (+ (* 18 (Pow a 2)) 6)))",
            "(assert (MenuItem \"E\" (+ (* 18 (Pow a 2)) 12)))"
        ]
    },
    {
        "id": 10194,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 26 (+ (* 4 x) 2)))",
            "(assert (Not (= (+ (* 4 x) 8) ?_id_0)))",
            "(assert (MenuItem \"A\" 32))",
            "(assert (MenuItem \"B\" 34))",
            "(assert (MenuItem \"C\" 36))",
            "(assert (MenuItem \"D\" 38))",
            "(assert (MenuItem \"E\" 40))"
        ]
    },
    {
        "id": 10198,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< p q))",
            "(assert (< r q))",
            "(assert (< r s))",
            "(assert (Not (True ?_id_14_18)))",
            "(assert (MenuItem \"I\" (< p s)))",
            "(assert (MenuItem \"II\" (< s q)))",
            "(assert (MenuItem \"III\" (< r p)))",
            "(assert (ComboItem \"A\" \"noneOfTheAbove\"))",
            "(assert (ComboItem \"B\" \"I\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10202,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Increasing (Elements 0 a b)))",
            "(assert (Not (< ?_id_7_11 (/ a b))))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" (/ b a)))",
            "(assert (MenuItem \"C\" (/ 1 (/ a b))))",
            "(assert (MenuItem \"D\" (/ a (* 2 b))))",
            "(assert (MenuItem \"E\" (/ (* 2 a) b)))"
        ]
    },
    {
        "id": 10208,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ?_id_18_22 True))",
            "(assert (Consecutive \"integer\" (Elements x y z)))",
            "(assert (Increasing (Elements x y z)))",
            "(assert (IsInteger x))",
            "(assert (IsInteger y))",
            "(assert (IsInteger z))",
            "(assert (Positive x))",
            "(assert (Positive y))",
            "(assert (Positive z))",
            "(assert (MenuItem \"I\" (= y (* 2 x))))",
            "(assert (MenuItem \"II\" (= z (* 2 x))))",
            "(assert (MenuItem \"III\" (= z (* 2 y))))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10212,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- (* 2 x) 1) (Abs (- x 5))))",
            "(assert (= _id_17_21 x))",
            "(assert (Not (= ?_id_12_16 _id_17_21)))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 10218,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= r 3))",
            "(assert (= s (- r 3)))",
            "(assert (= t (+ 5 s)))",
            "(assert (Not (= ?_id_16_17 t)))",
            "(assert (MenuItem \"A\" (- 0 5)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 8))"
        ]
    },
    {
        "id": 10220,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (- (- 0 (* 2 x)) 7) (+ (- 0 (* 6 x)) 8)))",
            "(assert (= ?_id_13_14 x))"
        ]
    },
    {
        "id": 10223,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= ab (* a b)))",
            "(assert (Negative (/ a b)))",
            "(assert (Not (Positive ?_id_11_15)))",
            "(assert (MenuItem \"I\" (* (+ a b) (- a b))))",
            "(assert (MenuItem \"II\" (- 1 ab)))",
            "(assert (MenuItem \"III\" (/ (- b a) a)))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10232,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Even k))",
            "(assert (IsInteger k))",
            "(assert (Not (And (IsInteger ?_id_7_11) (Odd ?_id_7_11))))",
            "(assert (MenuItem \"A\" (+ k 2)))",
            "(assert (MenuItem \"B\" (* 3 k)))",
            "(assert (MenuItem \"C\" (+ (* 3 k) 2)))",
            "(assert (MenuItem \"D\" (* k (- k 1))))",
            "(assert (MenuItem \"E\" (* (+ k 1) (- k 1))))"
        ]
    },
    {
        "id": 10237,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (/ (+ z 2) (- z 2)) ?_id_13_14))",
            "(assert (= 2 (/ (+ z 2) 5)))"
        ]
    },
    {
        "id": 10245,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (+ a b) (- a b)) (/ 3 7)))",
            "(assert (Not (= ?_id_21_22 (/ a b))))",
            "(assert (MenuItem \"A\" (- 0 (/ 5 2))))",
            "(assert (MenuItem \"B\" (- 0 1)))",
            "(assert (MenuItem \"C\" (- 0 (/ 2 5))))",
            "(assert (MenuItem \"D\" (/ 2 5)))",
            "(assert (MenuItem \"E\" (/ 5 2)))"
        ]
    },
    {
        "id": 10256,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 20 (+ (Pow x 2) x)))",
            "(assert (= ?_id_9_13 (- (Pow x 2) x)))",
            "(assert (MenuItem \"A\" (- 0 30)))",
            "(assert (MenuItem \"B\" 20))",
            "(assert (MenuItem \"C\" 30))",
            "(assert (MenuItem \"D\" 40))",
            "(assert (MenuItem \"E\" 450))"
        ]
    },
    {
        "id": 10260,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (/ 3 4) (Index 1 _gen0)) (+ 7 (* (/ 1 6) (Index 1 _gen0)))))",
            "(assert (IsPrototype _gen22 _gen0))",
            "(assert (Not (= ?_id_26_27 (* (/ 5 3) (Index 1 _gen0)))))",
            "(assert (MenuItem \"A\" 12))",
            "(assert (MenuItem \"B\" 15))",
            "(assert (MenuItem \"C\" 18))",
            "(assert (MenuItem \"D\" 20))",
            "(assert (MenuItem \"E\" 24))"
        ]
    },
    {
        "id": 10274,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ q p) 4))",
            "(assert (= (Pow q (/ 1 2)) 6))",
            "(assert (= 9 (/ (+ p q) s)))",
            "(assert (= _id_33_37 s))",
            "(assert (Not (= ?_id_31_32 _id_33_37)))",
            "(assert (MenuItem \"A\" (/ 5 6)))",
            "(assert (MenuItem \"B\" 5))",
            "(assert (MenuItem \"C\" 9))",
            "(assert (MenuItem \"D\" 13))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 10276,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- (Pow a 3) 5) (- (Pow a 3) b)))",
            "(assert (Not (= b ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 5)))",
            "(assert (MenuItem \"B\" (- 0 (Pow 5 (/ 1 3)))))",
            "(assert (MenuItem \"C\" (Pow 5 (/ 1 3))))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 15))"
        ]
    },
    {
        "id": 10277,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ 3 x) (/ 3 (- (* 2 x) 4))))",
            "(assert (= _id_22_26 x))",
            "(assert (Not (= ?_id_20_21 _id_22_26)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 10))"
        ]
    },
    {
        "id": 10301,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Increasing (Elements (- 0 10) x 10)))",
            "(assert (Not (True ?_id_8_12)))",
            "(assert (MenuItem \"I\" (< (Pow x 2) 10)))",
            "(assert (MenuItem \"II\" (< (Abs x) 10)))",
            "(assert (MenuItem \"III\" (< (* (+ x 10) (- x 10)) 0)))",
            "(assert (ComboItem \"A\" \"III\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"B\" \"III\"))",
            "(assert (ComboItem \"C\" \"II\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10306,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow 3 5) x))",
            "(assert (Not (= ?_id_7_12 (Pow 3 11))))",
            "(assert (MenuItem \"A\" (* 243 x)))",
            "(assert (MenuItem \"B\" (* 3 (Pow x 2))))",
            "(assert (MenuItem \"C\" (* 9 (Pow x 4))))",
            "(assert (MenuItem \"D\" (* 27 (Pow x 3))))",
            "(assert (MenuItem \"E\" (Pow x 6)))"
        ]
    },
    {
        "id": 10307,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- (Pow x 2) 6) (* g x)))",
            "(assert (= (/ (+ x 4) x) (* f x)))",
            "(assert (= x 2))",
            "(assert (Not (= ?_id_27_28 (Difference (Elements (* f x) (* g x))))))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 10309,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* x (- x 6)) (- 0 9)))",
            "(assert (= ?_id_11_12 (- (+ (Pow x 2) x) 2)))"
        ]
    },
    {
        "id": 10325,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_0_1 (* (/ 60 100) (* 20 y)))))",
            "(assert (MenuItem \"A\" (* 1.2 y)))",
            "(assert (MenuItem \"B\" (* 10 y)))",
            "(assert (MenuItem \"C\" (* 12 y)))",
            "(assert (MenuItem \"D\" (* 15 y)))",
            "(assert (MenuItem \"E\" (* 120 y)))"
        ]
    },
    {
        "id": 10328,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (Not (= ?_id_0 (* 9 (Pow x 2)))))",
            "(assert (MenuItem \"A\" (+ (Pow x 2) (* 8 (Pow x 2)))))",
            "(assert (MenuItem \"B\" (+ (* 4 x) (* 5 x))))",
            "(assert (MenuItem \"C\" (* (* 9 x) x)))",
            "(assert (MenuItem \"D\" (* (* 3 x) (* 3 x))))",
            "(assert (MenuItem \"E\" (* (- 0 (* 3 x)) (- 0 (* 3 x)))))"
        ]
    },
    {
        "id": 10329,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (- (Pow (+ x y) 2) (Pow (- x y) 2)) 72))",
            "(assert (= ?_id_27_31 (+ x y)))",
            "(assert (IsInteger x))",
            "(assert (IsInteger y))",
            "(assert (Positive x))",
            "(assert (Positive y))",
            "(assert (MenuItem \"A\" 10))",
            "(assert (MenuItem \"B\" 11))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 13))",
            "(assert (MenuItem \"E\" 14))"
        ]
    },
    {
        "id": 10338,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_20_21 n))",
            "(assert (Between (+ (* 3 n) 5) 20 40))",
            "(assert (IsInteger n))",
            "(assert (Prime (+ (* 3 n) 5)))"
        ]
    },
    {
        "id": 10344,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (Pow (+ x 1) (/ 1 3)) 3) 5))",
            "(assert (Not (= x ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 9)))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 7))",
            "(assert (MenuItem \"D\" 9))",
            "(assert (MenuItem \"E\" 26))"
        ]
    },
    {
        "id": 10351,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (GreaterThan n 0))",
            "(assert (Not (= ?_id_5_6 (+ (+ (Pow 3 (/ n 2)) (Pow 3 (/ n 2))) (Pow 3 (/ n 2))))))",
            "(assert (MenuItem \"A\" (* (/ 3 2) (Pow 3 (/ n 2)))))",
            "(assert (MenuItem \"B\" (Pow 3 (/ n 6))))",
            "(assert (MenuItem \"C\" (Pow 3 (+ (/ n 2) 1))))",
            "(assert (MenuItem \"D\" (Pow 3 (/ (* 3 n) 2))))",
            "(assert (MenuItem \"E\" (Pow 9 (/ n 2))))"
        ]
    },
    {
        "id": 10353,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< 0 (+ x y)))",
            "(assert (< y 0))",
            "(assert (Not (True ?_id_11_16)))",
            "(assert (MenuItem \"I\" (< x 0)))",
            "(assert (MenuItem \"II\" (< x (- 0 y))))",
            "(assert (MenuItem \"III\" (< 0 (- x y))))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10356,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* (- d 1) (+ d 1)) ?_id_20_24))",
            "(assert (IsInteger d))",
            "(assert (Positive d))",
            "(assert (MenuItem \"A\" 12))",
            "(assert (MenuItem \"B\" 13))",
            "(assert (MenuItem \"C\" 14))",
            "(assert (MenuItem \"D\" 15))",
            "(assert (MenuItem \"E\" 16))"
        ]
    },
    {
        "id": 10371,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (- (* 2 5) 10) ?_id_0))"
        ]
    },
    {
        "id": 10385,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ x y) a))",
            "(assert (= (+ x z) c))",
            "(assert (= (+ y z) b))",
            "(assert (Not (= ?_id_19_20 (Average (Elements x y z)))))",
            "(assert (MenuItem \"A\" (/ (+ (+ a b) c) 2)))",
            "(assert (MenuItem \"B\" (/ (+ (+ a b) c) 3)))",
            "(assert (MenuItem \"C\" (/ (+ (+ a b) c) 4)))",
            "(assert (MenuItem \"D\" (/ (+ (+ a b) c) 6)))",
            "(assert (MenuItem \"E\" (/ (+ (+ a b) c) 12)))"
        ]
    },
    {
        "id": 10386,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Median (Elements a (* 2 a) b (+ b 1))) (Average (Elements a (* 2 a) b (+ b 1)))))",
            "(assert (= _id_46_50 a))",
            "(assert (Increasing (Elements a (* 2 a) b (+ b 1))))",
            "(assert (Not (= ?_id_44_45 _id_46_50)))",
            "(assert (MenuItem \"A\" (/ (+ b 1) 2)))",
            "(assert (MenuItem \"B\" (- (* 2 b) 3)))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 1))"
        ]
    },
    {
        "id": 10387,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (DivisibleBy ?_id_0_4 5))",
            "(assert (DivisibleBy ?_id_0_4 7))",
            "(assert (Not (DivisibleBy ?_id_0_4 10)))",
            "(assert (MenuItem \"A\" 28))",
            "(assert (MenuItem \"B\" 50))",
            "(assert (MenuItem \"C\" 90))",
            "(assert (MenuItem \"D\" 105))",
            "(assert (MenuItem \"E\" 135))"
        ]
    },
    {
        "id": 10393,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* (/ (/ 4 p) 100) (Index 1 _gen1)) (* (/ p 100) (Index 1 _gen1))))",
            "(assert (= ?_id_23_24 p))",
            "(assert (IsPrototype _gen17 _gen1))",
            "(assert (Positive (Index 1 _gen1)))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 5))"
        ]
    },
    {
        "id": 10402,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= a (/ 4 3)))",
            "(assert (Not (= (- (/ 4 a) (/ a (- a 1))) ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 3)))",
            "(assert (MenuItem \"B\" (- 0 1)))",
            "(assert (MenuItem \"C\" (/ 3 4)))",
            "(assert (MenuItem \"D\" 1))",
            "(assert (MenuItem \"E\" 3))"
        ]
    },
    {
        "id": 10411,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Difference _id_3_6) 5))",
            "(assert (= (Product _id_3_6) 24))",
            "(assert (= ?_id_14_15 (Sum _id_3_6)))",
            "(assert (IsPrototype _gen13 _id_3_6))",
            "(assert (Positive _gen13))",
            "(assert (SizeIs _id_3_6 2))"
        ]
    },
    {
        "id": 10413,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 3 q) 9))",
            "(assert (= _id_12_16 p))",
            "(assert (= pq (* p q)))",
            "(assert (= pq 1))",
            "(assert (Not (= ?_id_10_11 _id_12_16)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" (/ 1 2)))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" (/ 1 3)))",
            "(assert (MenuItem \"E\" (/ 1 9)))"
        ]
    },
    {
        "id": 10420,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- a b) 3))",
            "(assert (= p (Pow 3 a)))",
            "(assert (= q (Pow 3 b)))",
            "(assert (Not (= ?_id_20_21 p)))",
            "(assert (MenuItem \"A\" (* 9 q)))",
            "(assert (MenuItem \"B\" (* 18 q)))",
            "(assert (MenuItem \"C\" (* (/ 1 27) q)))",
            "(assert (MenuItem \"D\" (* 27 q)))",
            "(assert (MenuItem \"E\" (/ q 27)))"
        ]
    },
    {
        "id": 10426,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (Pow m (- 0 1)) n) 2))",
            "(assert (Not (= n ?_id_11_12)))",
            "(assert (MenuItem \"A\" (- 0 (* 2 m))))",
            "(assert (MenuItem \"B\" (/ 1 m)))",
            "(assert (MenuItem \"C\" (/ 2 m)))",
            "(assert (MenuItem \"D\" (* 2 m)))",
            "(assert (MenuItem \"E\" (Pow m 2)))"
        ]
    },
    {
        "id": 10427,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* 3 m) 18))",
            "(assert (= (/ m n) (/ 3 4)))",
            "(assert (= ?_id_22_23 (* 3 n)))"
        ]
    },
    {
        "id": 10428,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Increasing (Elements y 0 x)))",
            "(assert (Not (True ?_id_7_12)))",
            "(assert (MenuItem \"A\" (GreaterThan (Pow x 3) (Pow y 3))))",
            "(assert (MenuItem \"B\" (< (Pow x 2) (Pow y 2))))",
            "(assert (MenuItem \"C\" (< (- x y) 0)))",
            "(assert (MenuItem \"D\" (< (/ 1 (Pow x 2)) (/ 1 (Pow y 2)))))",
            "(assert (MenuItem \"E\" (< (/ 1 x) (/ 1 y))))"
        ]
    },
    {
        "id": 10429,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< _gen12 k))",
            "(assert (Even _gen12))",
            "(assert (GreaterThan _gen12 0))",
            "(assert (IsInteger _gen12))",
            "(assert (IsInteger k))",
            "(assert (IsPrototype _gen12 _id_7_11))",
            "(assert (Not (SizeIs _id_7_11 ?_gen13)))",
            "(assert (Odd k))",
            "(assert (Positive k))",
            "(assert (MenuItem \"A\" (- k 1)))",
            "(assert (MenuItem \"B\" (/ k 2)))",
            "(assert (MenuItem \"C\" (/ 2 k)))",
            "(assert (MenuItem \"D\" (/ (- k 1) 2)))",
            "(assert (MenuItem \"E\" (/ 2 (- k 1))))"
        ]
    },
    {
        "id": 10435,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* (/ 3 4) x) (* (/ 2 3) x)))",
            "(assert (= ?_id_21_22 (* (/ 4 5) x)))"
        ]
    },
    {
        "id": 10442,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (< (- a 4) 1))",
            "(assert (= ?_id_13_17 a))",
            "(assert (GreaterThan (+ a 2) 5))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 4))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 10445,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- x y) 5))",
            "(assert (= 15 (+ (Pow x 2) (Pow y 2))))",
            "(assert (= _id_19_23 xy))",
            "(assert (= xy (* x y)))",
            "(assert (Not (= ?_id_17_18 _id_19_23)))",
            "(assert (MenuItem \"A\" (- 0 25)))",
            "(assert (MenuItem \"B\" (- 0 5)))",
            "(assert (MenuItem \"C\" (- 0 3)))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 25))"
        ]
    },
    {
        "id": 10453,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 3 (* 2 (Pow a (/ 1 2)))))",
            "(assert (= ?_id_9_10 a))"
        ]
    },
    {
        "id": 10454,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (+ x y) 10))",
            "(assert (= (- x y) 11))",
            "(assert (= ?_id_13_14 (- (Pow x 2) (Pow y 2))))"
        ]
    },
    {
        "id": 10464,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_0_4 (< (Abs k) 10))))",
            "(assert (MenuItem \"I\" (< (Pow k 2) 10)))",
            "(assert (MenuItem \"II\" (Increasing (Elements (- 0 10) k 10))))",
            "(assert (MenuItem \"III\" (< (* (+ k 10) (- k 10)) 0)))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10468,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= f (+ (+ (+ (+ 1 2) 4) 8) 16)))",
            "(assert (= g (+ (* (/ 1 2) f) (/ 1 2))))",
            "(assert (Not (= f (+ g ?_id_0))))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 8))",
            "(assert (MenuItem \"D\" 15))",
            "(assert (MenuItem \"E\" 16))"
        ]
    },
    {
        "id": 10470,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (/ 14 (Pow (- x 5) (/ 1 2))) 7))",
            "(assert (= ?_id_20_21 x))",
            "(assert (GreaterThan x 5))"
        ]
    },
    {
        "id": 10479,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* 5 m) ?_id_0))",
            "(assert (= 5 (Pow m x)))",
            "(assert (MenuItem \"A\" (Pow m (+ x 1))))",
            "(assert (MenuItem \"B\" (Pow m (+ x 2))))",
            "(assert (MenuItem \"C\" (Pow m (+ x 5))))",
            "(assert (MenuItem \"D\" (Pow m (* 5 x))))",
            "(assert (MenuItem \"E\" (Pow m (* 2 x))))"
        ]
    },
    {
        "id": 10483,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (+ a a) a) (* (* a a) a)))",
            "(assert (= _id_2_6 a))",
            "(assert (Not (= ?_id_0_1 _id_2_6)))",
            "(assert (Positive a))",
            "(assert (MenuItem \"A\" (/ 1 3)))",
            "(assert (MenuItem \"B\" (Pow 3 (/ 1 2))))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" (* 3 (Pow 3 (/ 1 2)))))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 10486,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< y 0))",
            "(assert (= xy (* x y)))",
            "(assert (GreaterThan x 0))",
            "(assert (Not (Positive ?_id_9_13)))",
            "(assert (MenuItem \"A\" (* 2 y)))",
            "(assert (MenuItem \"B\" (- 0 (* 2 x))))",
            "(assert (MenuItem \"C\" (- 0 (* 4 xy))))",
            "(assert (MenuItem \"D\" (+ x (* 2 y))))",
            "(assert (MenuItem \"E\" (* 4 (+ x y))))"
        ]
    },
    {
        "id": 10493,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Average (Elements a b c)) p))",
            "(assert (Not (= ?_id_17_21 (Average (Elements a b c d)))))",
            "(assert (MenuItem \"A\" (/ (+ (* 3 p) d) 4)))",
            "(assert (MenuItem \"B\" (/ (+ (* 3 p) d) 3)))",
            "(assert (MenuItem \"C\" (/ (+ p d) 4)))",
            "(assert (MenuItem \"D\" (/ (+ p d) 2)))",
            "(assert (MenuItem \"E\" (/ (* 3 (+ p d)) 4)))"
        ]
    },
    {
        "id": 10494,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_0_4 0.00326691)))",
            "(assert (MenuItem \"A\" (* 3.26691 (Pow 10 (- 0 3)))))",
            "(assert (MenuItem \"B\" (* 3.26691 (Pow 10 (- 0 2)))))",
            "(assert (MenuItem \"C\" (* 3.26691 (Pow 10 (- 0 1)))))",
            "(assert (MenuItem \"D\" (* 32.6691 (Pow 10 (- 0 2)))))",
            "(assert (MenuItem \"E\" (* 32.6691 (Pow 10 (- 0 3)))))"
        ]
    },
    {
        "id": 10495,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Pow 27 (- r 1)) (Pow 9 r)))",
            "(assert (= r ?_id_0))"
        ]
    },
    {
        "id": 10497,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_0_5 (- (* 2 (Sum (Elements (* 2 a) (* 5 b)))) (- b (* 3 a))))))",
            "(assert (MenuItem \"A\" (- (- 0 (* 9 b)) (* 7 a))))",
            "(assert (MenuItem \"B\" (- (- 0 (* 4 b)) a)))",
            "(assert (MenuItem \"C\" (+ (* 4 b) a)))",
            "(assert (MenuItem \"D\" (+ (* 7 b) (* 3 a))))",
            "(assert (MenuItem \"E\" (+ (* 9 b) (* 7 a))))"
        ]
    },
    {
        "id": 10502,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (GreaterThan x 0))",
            "(assert (Not (= (* (Pow 4 x) (Pow 8 x)) ?_id_0)))",
            "(assert (MenuItem \"A\" (Pow 2 (* 9 x))))",
            "(assert (MenuItem \"B\" (Pow 2 (* 8 x))))",
            "(assert (MenuItem \"C\" (Pow 2 (* 6 x))))",
            "(assert (MenuItem \"D\" (Pow 2 (* 5 x))))",
            "(assert (MenuItem \"E\" (Pow 2 (* 4 x))))"
        ]
    },
    {
        "id": 10506,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow (- a b) 2) (Pow (+ a b) 2)))",
            "(assert (= ab (* a b)))",
            "(assert (Not (True ?_id_17_21)))",
            "(assert (MenuItem \"A\" (= a 0)))",
            "(assert (MenuItem \"B\" (< b 0)))",
            "(assert (MenuItem \"C\" (= a b)))",
            "(assert (MenuItem \"D\" (= ab 0)))",
            "(assert (MenuItem \"E\" (= (+ a b) 0)))"
        ]
    },
    {
        "id": 10507,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Divides _gen7 42))",
            "(assert (IsPrototype _gen7 _id_5_10))",
            "(assert (Not (= ?_id_0_1 (Sum _id_5_10))))",
            "(assert (Positive _gen7))",
            "(assert (Prime _gen7))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 6))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 13))",
            "(assert (MenuItem \"E\" 76))"
        ]
    },
    {
        "id": 10508,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow a 3) 4))",
            "(assert (Not (= ?_id_7_8 (Pow a 6))))",
            "(assert (MenuItem \"A\" 8))",
            "(assert (MenuItem \"B\" 10))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 16))",
            "(assert (MenuItem \"E\" 64))"
        ]
    },
    {
        "id": 10516,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Sum _id_4_15) 51))",
            "(assert (= ?_id_18_19 x))",
            "(assert (BetweenIncl _gen8 (- 0 15) x))",
            "(assert (Consecutive \"integer\" _id_4_15))",
            "(assert (IsInteger _gen8))",
            "(assert (IsPrototype _gen8 _id_4_15))",
            "(assert (MenuItem \"A\" 15))",
            "(assert (MenuItem \"B\" 16))",
            "(assert (MenuItem \"C\" 18))",
            "(assert (MenuItem \"D\" 53))",
            "(assert (MenuItem \"E\" 66))"
        ]
    },
    {
        "id": 10526,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (DivisibleBy r 12))",
            "(assert (DivisibleBy r 18))",
            "(assert (Not (And (Positive ?_id_11_15) (Divides ?_id_11_15 r))))",
            "(assert (Positive r))",
            "(assert (MenuItem \"A\" 8))",
            "(assert (MenuItem \"B\" 24))",
            "(assert (MenuItem \"C\" 27))",
            "(assert (MenuItem \"D\" 30))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 10527,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Average (Elements p q 10)) 12))",
            "(assert (= 13 (Average (Elements (* 2 p) q 7))))",
            "(assert (= _id_33_37 p))",
            "(assert (Not (= ?_id_31_32 _id_33_37)))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 6))",
            "(assert (MenuItem \"C\" 9))",
            "(assert (MenuItem \"D\" 12))",
            "(assert (MenuItem \"E\" 15))"
        ]
    },
    {
        "id": 10530,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_0_1 (Digit 123456.789 -2))))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 10534,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ab (* a b)))",
            "(assert (Even ?_id_15_19))",
            "(assert (Even b))",
            "(assert (Negative a))",
            "(assert (Odd a))",
            "(assert (Positive ?_id_15_19))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" (+ a b)))",
            "(assert (MenuItem \"B\" (- 0 ab)))",
            "(assert (MenuItem \"C\" ab))",
            "(assert (MenuItem \"D\" (/ b a)))",
            "(assert (MenuItem \"E\" (- b a)))"
        ]
    },
    {
        "id": 10536,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= ab (* a b)))",
            "(assert (= ab 14))",
            "(assert (= bc (* b c)))",
            "(assert (= bc 21))",
            "(assert (GreaterThan a 1))",
            "(assert (GreaterThan b 1))",
            "(assert (GreaterThan c 1))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (IsInteger c))",
            "(assert (Not (True ?_id_22_26)))",
            "(assert (MenuItem \"A\" (Increasing (Elements b a c))))",
            "(assert (MenuItem \"B\" (Increasing (Elements a c b))))",
            "(assert (MenuItem \"C\" (Increasing (Elements c a b))))",
            "(assert (MenuItem \"D\" (Increasing (Elements b c a))))",
            "(assert (MenuItem \"E\" (Increasing (Elements c b a))))"
        ]
    },
    {
        "id": 10545,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* 2 c) 16))",
            "(assert (= (- c b) 5))",
            "(assert (= ?_id_17_18 (+ (+ a b) c)))",
            "(assert (= ab (* a b)))",
            "(assert (= ab 6))"
        ]
    },
    {
        "id": 10548,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 7 (/ (* 14 x) (Pow (+ (* 2 x) 2) (/ 1 2)))))",
            "(assert (= ?_id_18_19 x))",
            "(assert (MenuItem \"A\" (- 0 7)))",
            "(assert (MenuItem \"B\" (- 0 1)))",
            "(assert (MenuItem \"C\" (/ 1 2)))",
            "(assert (MenuItem \"D\" 1))",
            "(assert (MenuItem \"E\" 7))"
        ]
    },
    {
        "id": 10550,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 16 (+ (* 2 x) 10)))",
            "(assert (Not (= ?_id_8_9 (- (* 2 x) 10))))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" (- 0 3)))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 10552,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (/ q 2) (/ 7 10)))",
            "(assert (= ?_id_17_18 q))"
        ]
    },
    {
        "id": 10553,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ a b) (/ 7 4)))",
            "(assert (= (/ b c) (/ 8 6)))",
            "(assert (Not (= (/ a c) ?_id_0)))",
            "(assert (MenuItem \"A\" (/ 3 7)))",
            "(assert (MenuItem \"B\" (/ 4 7)))",
            "(assert (MenuItem \"C\" (/ 16 21)))",
            "(assert (MenuItem \"D\" (/ 21 16)))",
            "(assert (MenuItem \"E\" (/ 7 3)))"
        ]
    },
    {
        "id": 10554,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ x y) (/ 5 7)))",
            "(assert (Not (= ?_id_17_18 (/ (* 7 x) (* 5 y)))))",
            "(assert (MenuItem \"A\" (/ 2 7)))",
            "(assert (MenuItem \"B\" (/ 5 7)))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" (/ 7 5)))",
            "(assert (MenuItem \"E\" (/ 49 25)))"
        ]
    },
    {
        "id": 10557,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ?_id_0_2 (+ 18 (* (/ 25 100) ?_id_0_2))))",
            "(assert (MenuItem \"A\" 32))",
            "(assert (MenuItem \"B\" 24))",
            "(assert (MenuItem \"C\" 20))",
            "(assert (MenuItem \"D\" 12))",
            "(assert (MenuItem \"E\" 8))"
        ]
    },
    {
        "id": 10564,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Min _gen38) (- 0 20)))",
            "(assert (= (Sum _id_4_10) 72))",
            "(assert (Consecutive \"even\" _id_4_10))",
            "(assert (HasPrototype _gen38 _gen26))",
            "(assert (IsInteger _gen19))",
            "(assert (IsInteger _gen26))",
            "(assert (IsInteger _gen44))",
            "(assert (IsPrototype _gen19 _id_23_26))",
            "(assert (IsPrototype _gen44 _id_4_10))",
            "(assert (MemberOf _gen19 _id_4_10))",
            "(assert (MemberOf _gen26 _id_4_10))",
            "(assert (Not (SizeIs _id_23_26 ?_gen20)))",
            "(assert (MenuItem \"A\" 20))",
            "(assert (MenuItem \"B\" 21))",
            "(assert (MenuItem \"C\" 22))",
            "(assert (MenuItem \"D\" 23))",
            "(assert (MenuItem \"E\" 24))"
        ]
    },
    {
        "id": 10565,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= m (Abs (/ 1 x))))",
            "(assert (= n (/ 1 y)))",
            "(assert (= x (- 0 2)))",
            "(assert (= y (- 0 3)))",
            "(assert (Not (= ?_id_23_24 (+ m n))))",
            "(assert (MenuItem \"A\" (- 0 (/ 5 6))))",
            "(assert (MenuItem \"B\" (- 0 (/ 1 6))))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" (/ 1 6)))",
            "(assert (MenuItem \"E\" (/ 5 6)))"
        ]
    },
    {
        "id": 10566,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 3 x) 8))",
            "(assert (Not (= ?_id_6_7 (* 3 (- 8 x)))))",
            "(assert (MenuItem \"A\" 16))",
            "(assert (MenuItem \"B\" 20))",
            "(assert (MenuItem \"C\" 24))",
            "(assert (MenuItem \"D\" 28))",
            "(assert (MenuItem \"E\" 32))"
        ]
    },
    {
        "id": 10567,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ab (* a b)))",
            "(assert (Even ?_id_15_19))",
            "(assert (Even b))",
            "(assert (Negative a))",
            "(assert (Odd a))",
            "(assert (Positive ?_id_15_19))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" (+ a b)))",
            "(assert (MenuItem \"B\" (- 0 ab)))",
            "(assert (MenuItem \"C\" ab))",
            "(assert (MenuItem \"D\" (/ b a)))",
            "(assert (MenuItem \"E\" (- b a)))"
        ]
    },
    {
        "id": 10575,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ 4 3) (/ (+ (* 2 x) 4) (- x 3))))",
            "(assert (= _id_25_29 x))",
            "(assert (Not (= ?_id_23_24 _id_25_29)))",
            "(assert (MenuItem \"A\" (- 0 12)))",
            "(assert (MenuItem \"B\" (- 0 3)))",
            "(assert (MenuItem \"C\" (- 0 2)))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 12))"
        ]
    },
    {
        "id": 10581,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= xy (* x y)))",
            "(assert (= xz (* x z)))",
            "(assert (= yz (* y z)))",
            "(assert (Negative (* (* x (Pow y 2)) (Pow z 3))))",
            "(assert (Not (Negative ?_id_12_16)))",
            "(assert (MenuItem \"A\" xy))",
            "(assert (MenuItem \"B\" xz))",
            "(assert (MenuItem \"C\" yz))",
            "(assert (MenuItem \"D\" (* (Pow x 2) z)))",
            "(assert (MenuItem \"E\" (* x (Pow z 2))))"
        ]
    },
    {
        "id": 10589,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ a b) (/ (* 2 a) b)))",
            "(assert (Not (= b 0)))",
            "(assert (Not (True ?_id_23_27)))",
            "(assert (MenuItem \"I\" (= b (* 2 a))))",
            "(assert (MenuItem \"II\" (= a 0)))",
            "(assert (MenuItem \"III\" (= b (* 2 b))))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10594,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Pow x 4) 10))",
            "(assert (= ?_id_7_8 (Pow x 6)))",
            "(assert (MenuItem \"A\" (* 10 (Pow 10 (/ 1 2)))))",
            "(assert (MenuItem \"B\" 100))",
            "(assert (MenuItem \"C\" (* 100 (Pow 10 (/ 1 2)))))",
            "(assert (MenuItem \"D\" 1000))",
            "(assert (MenuItem \"E\" (* 1000 (Pow 10 (/ 1 2)))))"
        ]
    },
    {
        "id": 10595,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< (Abs x) 2))",
            "(assert (Not (= ?_id_8_12 (Abs (- (Pow x 2) 4)))))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" (- (Pow x 2) 4)))",
            "(assert (MenuItem \"C\" (+ (Pow x 2) 4)))",
            "(assert (MenuItem \"D\" (- 4 (Pow x 2))))",
            "(assert (MenuItem \"E\" (- (- 0 4) (Pow x 2))))"
        ]
    },
    {
        "id": 10597,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (+ (* 2 (+ x 2)) (* 4 (- x 1))) 8))",
            "(assert (= x ?_id_0))"
        ]
    },
    {
        "id": 10598,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 81 (Pow (Pow 3 x) y)))",
            "(assert (= 84 (+ (Pow 3 x) (Pow 3 y))))",
            "(assert (= ?_id_29_33 _id_35_39))",
            "(assert (= _id_35_39 x))",
            "(assert (IsInteger x))",
            "(assert (IsInteger y))",
            "(assert (Positive x))",
            "(assert (Positive y))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 4))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 10599,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ?_id_0_4 (Product _id_8_11)))",
            "(assert (Consecutive \"integer\" _id_8_11))",
            "(assert (IsInteger _gen4))",
            "(assert (IsPrototype _gen4 _id_8_11))",
            "(assert (SizeIs _id_8_11 3))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" 1))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" 7))",
            "(assert (MenuItem \"E\" 8))"
        ]
    },
    {
        "id": 10602,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (/ (+ a b) 5) (/ 1 (- a b))))",
            "(assert (= ?_id_29_30 a))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (Positive a))",
            "(assert (Positive b))"
        ]
    },
    {
        "id": 10603,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (* 8 27) 64) (Pow r 3)))",
            "(assert (= _id_13_17 r))",
            "(assert (Not (= ?_id_11_12 _id_13_17)))",
            "(assert (MenuItem \"A\" 6))",
            "(assert (MenuItem \"B\" 12))",
            "(assert (MenuItem \"C\" 18))",
            "(assert (MenuItem \"D\" 24))",
            "(assert (MenuItem \"E\" 32))"
        ]
    },
    {
        "id": 10612,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ a b) (/ 7 8)))",
            "(assert (= (/ c d) (/ 7 5)))",
            "(assert (= ad (* a d)))",
            "(assert (= bc (* b c)))",
            "(assert (Not (= ?_id_23_24 (/ ad bc))))",
            "(assert (MenuItem \"A\" (/ 5 8)))",
            "(assert (MenuItem \"B\" (/ 49 40)))",
            "(assert (MenuItem \"C\" (/ 8 5)))",
            "(assert (MenuItem \"D\" (/ 40 49)))",
            "(assert (MenuItem \"E\" (/ 7 8)))"
        ]
    },
    {
        "id": 10619,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 11 (+ 4 (* 3 y))))",
            "(assert (Not (= ?_id_0_1 (* 9 y))))",
            "(assert (MenuItem \"A\" (+ 2 (/ 1 3))))",
            "(assert (MenuItem \"B\" 7))",
            "(assert (MenuItem \"C\" (+ 9 (/ 2 3))))",
            "(assert (MenuItem \"D\" 14))",
            "(assert (MenuItem \"E\" 21))"
        ]
    },
    {
        "id": 10639,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Abs (- x 6)) (Pow x 2)))",
            "(assert (= x ?_id_15_19))",
            "(assert (MenuItem \"A\" (- 0 3)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 10645,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_10_11 (- (Pow a 2) (Pow b 2))))",
            "(assert (= a (- 0 5)))",
            "(assert (= ab (* a b)))",
            "(assert (= ab 20))"
        ]
    },
    {
        "id": 10649,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (* 2 x) 3) (/ 4 5)))",
            "(assert (Not (= x ?_id_0)))",
            "(assert (MenuItem \"A\" (/ 2 5)))",
            "(assert (MenuItem \"B\" (/ 5 12)))",
            "(assert (MenuItem \"C\" (/ 5 6)))",
            "(assert (MenuItem \"D\" (/ 6 5)))",
            "(assert (MenuItem \"E\" (/ 12 5)))"
        ]
    },
    {
        "id": 10650,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 0.0013 x) 0.013))",
            "(assert (Not (= x ?_id_0)))",
            "(assert (MenuItem \"A\" 0.01))",
            "(assert (MenuItem \"B\" 0.1))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" 10))",
            "(assert (MenuItem \"E\" 100))"
        ]
    },
    {
        "id": 10655,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 12 (- (+ w 12) 12)))",
            "(assert (Not (= w ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 12)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 24))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 10660,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= wx (* w x)))",
            "(assert (= wx y))",
            "(assert (= wxyz (* (* (* w x) y) z)))",
            "(assert (= xy (* x y)))",
            "(assert (= xy z))",
            "(assert (= xz (* x z)))",
            "(assert (Not (= ?_id_13_17 w)))",
            "(assert (Not (= wxyz 0)))",
            "(assert (MenuItem \"A\" xz))",
            "(assert (MenuItem \"B\" (* x (Pow z 2))))",
            "(assert (MenuItem \"C\" (/ x z)))",
            "(assert (MenuItem \"D\" (/ z x)))",
            "(assert (MenuItem \"E\" (/ z (Pow x 2))))"
        ]
    },
    {
        "id": 10664,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 5 (- (+ p q) 2)))",
            "(assert (Not (= ?_id_9_10 (- (+ p q) 7))))",
            "(assert (MenuItem \"A\" (- 0 3)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 6))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 10665,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* b (Pow 10 5)) (- (* 5 (Pow 10 5)) (* 4 (Pow 10 4)))))",
            "(assert (= ?_id_23_24 b))"
        ]
    },
    {
        "id": 10674,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< x 64))",
            "(assert (= 64 (Pow x (/ y 2))))",
            "(assert (GreaterThan x y))",
            "(assert (GreaterThan y 3))",
            "(assert (IsInteger x))",
            "(assert (IsInteger y))",
            "(assert (Not (= ?_id_36_37 (+ x y))))",
            "(assert (Positive x))",
            "(assert (Positive y))",
            "(assert (MenuItem \"A\" 4))",
            "(assert (MenuItem \"B\" 7))",
            "(assert (MenuItem \"C\" 8))",
            "(assert (MenuItem \"D\" 10))",
            "(assert (MenuItem \"E\" 12))"
        ]
    },
    {
        "id": 10678,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 19 (+ (* 3 x) 1)))",
            "(assert (Not (= (- (* 6 x) 2) ?_id_0)))",
            "(assert (MenuItem \"A\" 6))",
            "(assert (MenuItem \"B\" 12))",
            "(assert (MenuItem \"C\" 34))",
            "(assert (MenuItem \"D\" 38))",
            "(assert (MenuItem \"E\" 40))"
        ]
    },
    {
        "id": 10679,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (- (* 5 x) 4) (- x 1)))",
            "(assert (= ?_id_10_11 x))"
        ]
    },
    {
        "id": 10697,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= y (Pow 2 (/ 3 4))))",
            "(assert (Not (= ?_id_15_20 (Pow 2 3))))",
            "(assert (MenuItem \"A\" 4))",
            "(assert (MenuItem \"B\" (* 4 y)))",
            "(assert (MenuItem \"C\" (* 4 (Pow y 2))))",
            "(assert (MenuItem \"D\" (Pow y 4)))",
            "(assert (MenuItem \"E\" (Pow y 5)))"
        ]
    },
    {
        "id": 10710,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (* (/ (- 16 6) 6) 100) (* (/ (- ?_id_16_18 12) 12) 100))))",
            "(assert (MenuItem \"A\" 16))",
            "(assert (MenuItem \"B\" 22))",
            "(assert (MenuItem \"C\" 23))",
            "(assert (MenuItem \"D\" 32))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 10717,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (+ m m) (* m m)) (/ 1 5)))",
            "(assert (Not (True ?_id_21_25)))",
            "(assert (MenuItem \"I\" (= m 0)))",
            "(assert (MenuItem \"II\" (= m 5)))",
            "(assert (MenuItem \"III\" (= m 10)))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10725,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_0_1 (Min _gen9)))",
            "(assert (= _gen2 k))",
            "(assert (GreaterThanOrEqual (Pow k 2) 165))",
            "(assert (HasPrototype _gen9 _gen2))",
            "(assert (IsInteger _gen2))",
            "(assert (IsPrototype _gen13 _gen3))",
            "(assert (MemberOf _gen2 _gen3))",
            "(assert (Positive _gen2))"
        ]
    },
    {
        "id": 10732,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Sum _id_4_6) 27))",
            "(assert (IsPrototype _gen13 _id_4_6))",
            "(assert (Not (= ?_id_9_10 (Average _id_4_6))))",
            "(assert (SizeIs _id_4_6 3))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" 9))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 16))",
            "(assert (MenuItem \"E\" 18))"
        ]
    },
    {
        "id": 10741,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Average (Elements a b 10)) 100))",
            "(assert (= ?_id_17_18 (Average (Elements a b))))"
        ]
    },
    {
        "id": 10749,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (+ (/ (- (Pow a 2) (Pow b 2)) (- (Pow b 2) (Pow a 2))) (/ (- a b) (- b a))) ?_id_0)))",
            "(assert (Not (= (Pow a 2) (Pow b 2))))",
            "(assert (MenuItem \"A\" (- 0 2)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" (/ (+ a b) (- a b))))",
            "(assert (MenuItem \"E\" (/ (- a b) (- b a))))"
        ]
    },
    {
        "id": 10777,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_18_19 (+ (* (/ 9 5) 25) 32))))",
            "(assert (MenuItem \"A\" 13))",
            "(assert (MenuItem \"B\" 46))",
            "(assert (MenuItem \"C\" 77))",
            "(assert (MenuItem \"D\" 103))",
            "(assert (MenuItem \"E\" 113))"
        ]
    },
    {
        "id": 10785,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= p 2))",
            "(assert (Not (= ?_id_5_6 (* (* 2 q) (- 7 (* 6 p))))))",
            "(assert (MenuItem \"A\" (- 0 (* 10 q))))",
            "(assert (MenuItem \"B\" (* 10 q)))",
            "(assert (MenuItem \"C\" (- (* 14 q) 12)))",
            "(assert (MenuItem \"D\" (- 28 (* 6 q))))",
            "(assert (MenuItem \"E\" (* 36 q)))"
        ]
    },
    {
        "id": 10791,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (Between ?_id_0_5 1 2)))",
            "(assert (MenuItem \"A\" (/ 7 9)))",
            "(assert (MenuItem \"B\" (/ 7 3)))",
            "(assert (MenuItem \"C\" (/ 9 4)))",
            "(assert (MenuItem \"D\" (/ 10 7)))",
            "(assert (MenuItem \"E\" (/ 12 5)))"
        ]
    },
    {
        "id": 10806,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ 4 (Index 1 _gen1)) (/ (Index 1 _gen1) 7)))",
            "(assert (IsPrototype _gen15 _gen1))",
            "(assert (Not (= ?_id_20_21 (Index 1 _gen1))))",
            "(assert (MenuItem \"A\" (- 0 (/ 14 3))))",
            "(assert (MenuItem \"B\" (- 0 (/ 2 3))))",
            "(assert (MenuItem \"C\" (/ 4 7)))",
            "(assert (MenuItem \"D\" (/ 2 3)))",
            "(assert (MenuItem \"E\" (/ 14 3)))"
        ]
    },
    {
        "id": 10810,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (/ 1.5 18) (/ x 2.4)))",
            "(assert (= ?_id_17_18 x))"
        ]
    },
    {
        "id": 10812,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 12 (- (Pow a 2) (Pow b 2))))",
            "(assert (= _id_43_47 a))",
            "(assert (Above a))",
            "(assert (Above b))",
            "(assert (GreaterThan (+ a b) 4))",
            "(assert (GreaterThan a b))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (MemberOf a (Elements a b)))",
            "(assert (MemberOf b (Elements a b)))",
            "(assert (Not (= ?_id_41_42 _id_43_47)))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 5))"
        ]
    },
    {
        "id": 10814,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< a 0))",
            "(assert (= ab (* a b)))",
            "(assert (GreaterThan b 0))",
            "(assert (True ?_id_9_13))",
            "(assert (MenuItem \"A\" (= (+ a b) 0)))",
            "(assert (MenuItem \"B\" (= (- a b) 0)))",
            "(assert (MenuItem \"C\" (< ab 0)))",
            "(assert (MenuItem \"D\" (< (/ a b) 0)))",
            "(assert (MenuItem \"E\" (GreaterThan (+ b a) 0)))"
        ]
    },
    {
        "id": 10824,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (+ (* 60 (Pow 10 4)) (* 60 (Pow 10 2))) ?_id_0)))",
            "(assert (MenuItem \"A\" (* 606 (Pow 10 3))))",
            "(assert (MenuItem \"B\" (* 606 (Pow 10 2))))",
            "(assert (MenuItem \"C\" (* 120 (Pow 10 6))))",
            "(assert (MenuItem \"D\" (* 66 (Pow 10 4))))",
            "(assert (MenuItem \"E\" (* 60 (Pow 10 6))))"
        ]
    },

    {
        "id": 10831,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (Pow x 6) w) (+ (Pow x 6) 4)))",
            "(assert (Not (= w ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" (- 0 (Pow 4 (/ 1 6)))))",
            "(assert (MenuItem \"C\" (Pow 4 (/ 1 6))))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" (Pow 4 6)))"
        ]
    },
    {
        "id": 10832,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* 10 (+ x 10)) (- (* 2 (Pow x 2)) 68)))",
            "(assert (= ?_id_15_16 x))"
        ]
    },
    {
        "id": 10841,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* (- x 5) y) (+ (- (Pow x 2) (* 10 x)) 25)))",
            "(assert (= ?_id_17_18 y))",
            "(assert (= x 10))"
        ]
    },
    {
        "id": 10856,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= ?_id_9_13 k))",
            "(assert (Increasing (Elements (Abs (- k 5)) 8)))",
            "(assert (MenuItem \"A\" 10))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" (- 0 3)))",
            "(assert (MenuItem \"E\" (- 0 4)))"
        ]
    },
    {
        "id": 10860,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Pow x (/ 1 2)) (/ x 10)))",
            "(assert (= ?_id_18_19 x))",
            "(assert (GreaterThan x 0))",
            "(assert (MenuItem \"A\" (- 0 1)))",
            "(assert (MenuItem \"B\" 1))",
            "(assert (MenuItem \"C\" 10))",
            "(assert (MenuItem \"D\" 100))",
            "(assert (MenuItem \"E\" 1000))"
        ]
    },
    {
        "id": 10861,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (Not (And (Positive ?_id_0) (Divides ?_id_0 120))))",
            "(assert (MenuItem \"A\" 4))",
            "(assert (MenuItem \"B\" 10))",
            "(assert (MenuItem \"C\" 18))",
            "(assert (MenuItem \"D\" 24))",
            "(assert (MenuItem \"E\" 60))"
        ]
    },
    {
        "id": 10870,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< k 0))",
            "(assert (= ak (* a k)))",
            "(assert (= bk (* b k)))",
            "(assert (GreaterThan a b))",
            "(assert (Not (True ?_id_9_13)))",
            "(assert (MenuItem \"I\" (GreaterThan ak bk)))",
            "(assert (MenuItem \"II\" (GreaterThan (Pow a 2) (Pow b 2))))",
            "(assert (MenuItem \"III\" (< (/ (+ a k) k) (/ (+ b k) k))))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"D\" \"III\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10873,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= ab (* a b)))",
            "(assert (= abc (* (* a b) c)))",
            "(assert (= abc (Pow b 2)))",
            "(assert (= ac (* a c)))",
            "(assert (= bc (* b c)))",
            "(assert (Not (= ?_id_17_21 b)))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (Positive c))",
            "(assert (MenuItem \"A\" ac))",
            "(assert (MenuItem \"B\" ab))",
            "(assert (MenuItem \"C\" bc))",
            "(assert (MenuItem \"D\" (/ a c)))",
            "(assert (MenuItem \"E\" (/ c a)))"
        ]
    },
    {
        "id": 10874,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow a c) 64))",
            "(assert (= (Pow a x) 4))",
            "(assert (Not (= ?_id_13_14 (Pow a (- x c)))))",
            "(assert (MenuItem \"A\" (- 0 60)))",
            "(assert (MenuItem \"B\" (- 0 16)))",
            "(assert (MenuItem \"C\" (/ 1 16)))",
            "(assert (MenuItem \"D\" 16))",
            "(assert (MenuItem \"E\" 32))"
        ]
    },
    {
        "id": 10875,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 10 (- a (* 2 b))))",
            "(assert (= 5 (- b (* 3 c))))",
            "(assert (= _id_22_26 a))",
            "(assert (= c 1))",
            "(assert (Not (= ?_id_20_21 _id_22_26)))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" 10))",
            "(assert (MenuItem \"C\" 18))",
            "(assert (MenuItem \"D\" 26))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 10883,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (* 10 a) (* 8 b)) (* 4 x)))",
            "(assert (Not (= (+ (* 5 a) (* 4 b)) ?_id_0)))",
            "(assert (MenuItem \"A\" (* 8 x)))",
            "(assert (MenuItem \"B\" (* 4 x)))",
            "(assert (MenuItem \"C\" (* 2 x)))",
            "(assert (MenuItem \"D\" x))",
            "(assert (MenuItem \"E\" (/ x 2)))"
        ]
    },
    {
        "id": 10884,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (< (- (* 5 x) 30) 0))",
            "(assert (= ?_id_0_1 (Max _gen12)))",
            "(assert (= _gen5 x))",
            "(assert (HasPrototype _gen12 _gen5))",
            "(assert (IsInteger _gen5))",
            "(assert (IsPrototype _gen16 _gen6))",
            "(assert (MemberOf _gen5 _gen6))"
        ]
    },
    {
        "id": 10889,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ?_id_25_26 (/ x z)))",
            "(assert (= x (* (/ 2 5) y)))",
            "(assert (= y (* (/ 5 12) z)))",
            "(assert (MenuItem \"A\" (/ 1 12)))",
            "(assert (MenuItem \"B\" (/ 1 6)))",
            "(assert (MenuItem \"C\" (/ 1 3)))",
            "(assert (MenuItem \"D\" (/ 1 2)))",
            "(assert (MenuItem \"E\" (/ 2 3)))"
        ]
    },
    {
        "id": 10892,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ a b) 4))",
            "(assert (= _id_23_27 b))",
            "(assert (= a (* 8 c)))",
            "(assert (= c 9))",
            "(assert (Not (= ?_id_21_22 _id_23_27)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 18))",
            "(assert (MenuItem \"D\" 36))",
            "(assert (MenuItem \"E\" 72))"
        ]
    },
    {
        "id": 10904,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< (Abs (- x (/ 1 2))) (/ 3 2)))",
            "(assert (Not (True ?_id_21_25)))",
            "(assert (MenuItem \"A\" (< x 0)))",
            "(assert (MenuItem \"B\" (GreaterThan x 0)))",
            "(assert (MenuItem \"C\" (Increasing (Elements (- 0 3) x 0))))",
            "(assert (MenuItem \"D\" (Increasing (Elements (- 0 2) x 1))))",
            "(assert (MenuItem \"E\" (Increasing (Elements (- 0 1) x 2))))"
        ]
    },
    {
        "id": 10920,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (* 2 k) (* 6 s)) (/ (+ (* 6 k) 5) (+ (* 18 s) 10))))",
            "(assert (IsInteger k))",
            "(assert (IsInteger s))",
            "(assert (Not (True ?_id_33_37)))",
            "(assert (Positive k))",
            "(assert (Positive s))",
            "(assert (MenuItem \"I\" (= k s)))",
            "(assert (MenuItem \"II\" (= k 1.5)))",
            "(assert (MenuItem \"III\" (= k (* 1.5 s))))",
            "(assert (ComboItem \"A\" \"noneOfTheAbove\"))",
            "(assert (ComboItem \"B\" \"I\"))",
            "(assert (ComboItem \"C\" \"II\"))",
            "(assert (ComboItem \"D\" \"III\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))"
        ]
    },
    {
        "id": 10927,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ q r) 4))",
            "(assert (= (/ q s) 6))",
            "(assert (= _id_28_32 r))",
            "(assert (= s 2))",
            "(assert (Not (= ?_id_26_27 _id_28_32)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 6))",
            "(assert (MenuItem \"E\" 12))"
        ]
    },
    {
        "id": 10936,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Increasing (Elements (- 0 1) n 1)))",
            "(assert (Not (= n 0)))",
            "(assert (Not (True ?_id_12_17)))",
            "(assert (MenuItem \"I\" (< n (* 2 n))))",
            "(assert (MenuItem \"II\" (< (Pow n 2) n)))",
            "(assert (MenuItem \"III\" (< (Pow n 2) (/ 1 (Pow n 2)))))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"III\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 10937,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= pqr (* (* p q) r)))",
            "(assert (Not (= ?_id_10_14 (* (/ p 100) (* (/ q 100) r)))))",
            "(assert (Positive p))",
            "(assert (Positive q))",
            "(assert (Positive r))",
            "(assert (MenuItem \"A\" (* 1.0E-4 pqr)))",
            "(assert (MenuItem \"B\" (* 0.001 pqr)))",
            "(assert (MenuItem \"C\" (* 0.1 pqr)))",
            "(assert (MenuItem \"D\" (* 100 pqr)))",
            "(assert (MenuItem \"E\" (* 10000 pqr)))"
        ]
    },
    {
        "id": 10944,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 102 (* (* (Index 1 _gen4) (/ 1 2)) 24)))",
            "(assert (= ?_id_28_29 (Index 1 _gen4)))",
            "(assert (IsPrototype _gen47 _gen4))"
        ]
    },
    {
        "id": 10961,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- (Pow a 2) b) (- (Pow (+ a 2) 2) (+ b 2))))",
            "(assert (IsPrototype _gen33 _id_1_3))",
            "(assert (Not (True ?_id_41_45)))",
            "(assert (MenuItem \"A\" (= a 0)))",
            "(assert (MenuItem \"B\" (= a (- 0 (/ 1 2)))))",
            "(assert (MenuItem \"C\" (= a (- 0 1))))",
            "(assert (MenuItem \"D\" (= b 0)))",
            "(assert (MenuItem \"E\" (= b (- 0 1))))"
        ]
    },
    {
        "id": 10963,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* 4 (Index 1 _gen1)) (+ ?_id_19_20 78)))",
            "(assert (= (Index 1 _gen1) ?_id_19_20))",
            "(assert (IsPrototype _gen8 _gen1))"
        ]
    },
    {
        "id": 10964,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Sum (Elements a b)) c))",
            "(assert (Not (= ?_id_10_11 (Average (Elements a b c)))))",
            "(assert (MenuItem \"A\" (* 2 c)))",
            "(assert (MenuItem \"B\" (/ (* 2 c) 3)))",
            "(assert (MenuItem \"C\" (/ (+ a b) c)))",
            "(assert (MenuItem \"D\" (/ (* 3 c) (+ a b))))",
            "(assert (MenuItem \"E\" (- c (+ a b))))"
        ]
    },
    {
        "id": 10965,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (* 2 x) 4) b))",
            "(assert (Not (= (+ (* 6 x) 12) ?_id_0)))",
            "(assert (MenuItem \"A\" (+ b 3)))",
            "(assert (MenuItem \"B\" (+ b 12)))",
            "(assert (MenuItem \"C\" (* 3 b)))",
            "(assert (MenuItem \"D\" (+ (* 3 b) 3)))",
            "(assert (MenuItem \"E\" (+ (* 3 b) 12)))"
        ]
    },
    {
        "id": 10966,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (+ a b) (- x y)) (/ 1 2)))",
            "(assert (= (/ (- a b) (+ x y)) (/ 2 3)))",
            "(assert (Not (= (/ (- (* 2 (Pow a 2)) (* 2 (Pow b 2))) (- (* 3 (Pow x 2)) (* 3 (Pow y 2)))) ?_id_0)))",
            "(assert (MenuItem \"A\" (/ 1 3)))",
            "(assert (MenuItem \"B\" (/ 1 2)))",
            "(assert (MenuItem \"C\" (/ 2 7)))",
            "(assert (MenuItem \"D\" (/ 2 9)))",
            "(assert (MenuItem \"E\" (/ 2 3)))"
        ]
    },
    {
        "id": 10967,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_0_1 (+ (+ (+ (+ (/ 1 5) (/ 2 10)) (/ 3 15)) (/ 4 20)) (/ 5 25))))"
        ]
    },
    {
        "id": 10970,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Index 1 _gen75) (Product _id_12_16)))",
            "(assert (= ?_gen98 (Index 1 _gen75)))",
            "(assert (Consecutive \"even\" _id_12_16))",
            "(assert (DigitCount (Index 1 _gen75) 3))",
            "(assert (IsPrototype _gen101 _gen75))",
            "(assert (IsPrototype _gen102 _id_12_16))",
            "(assert (SizeIs _id_12_16 3))"
        ]
    },
    {
        "id": 10972,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ 3 (/ 5 x)) (* f x)))",
            "(assert (= ?_id_16_20 (* f x)))",
            "(assert (MenuItem \"A\" (- 0 (/ 5 3))))",
            "(assert (MenuItem \"B\" (- 0 (/ 3 5))))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" (/ 5 3)))",
            "(assert (MenuItem \"E\" 3))"
        ]
    },
    {
        "id": 10982,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= st (* s t)))",
            "(assert (= su (* s u)))",
            "(assert (GreaterThan (* (* (* (Pow r 2) (Pow s 3)) (Pow t 4)) u) 0))",
            "(assert (Not (True ?_id_15_19)))",
            "(assert (MenuItem \"A\" (GreaterThan r 0)))",
            "(assert (MenuItem \"B\" (< s 0)))",
            "(assert (MenuItem \"C\" (< t 0)))",
            "(assert (MenuItem \"D\" (GreaterThan su 0)))",
            "(assert (MenuItem \"E\" (GreaterThan st 0)))"
        ]
    },
    {
        "id": 10983,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 3 (+ a (* 2 b))) 7))",
            "(assert (Not (= ?_id_11_12 (+ (* 9 a) (* 18 b)))))",
            "(assert (MenuItem \"A\" 21))",
            "(assert (MenuItem \"B\" 28))",
            "(assert (MenuItem \"C\" 49))",
            "(assert (MenuItem \"D\" 63))",
            "(assert (MenuItem \"E\" 81))"
        ]
    },
    {
        "id": 10986,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< b 0))",
            "(assert (= ab (* a b)))",
            "(assert (GreaterThan a 0))",
            "(assert (Not (True ?_id_9_13)))",
            "(assert (MenuItem \"A\" (= (+ a b) 0)))",
            "(assert (MenuItem \"B\" (< (/ a b) 0)))",
            "(assert (MenuItem \"C\" (< (+ a b) 0)))",
            "(assert (MenuItem \"D\" (GreaterThan (+ a b) 0)))",
            "(assert (MenuItem \"E\" (GreaterThan ab 0)))"
        ]
    },
    {
        "id": 10988,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (+ ?_id_0_2 (* (/ 15 100) z)) (* (/ 30 100) z))))",
            "(assert (MenuItem \"A\" (* 15 z)))",
            "(assert (MenuItem \"B\" (* 2 z)))",
            "(assert (MenuItem \"C\" (* 1.5 z)))",
            "(assert (MenuItem \"D\" z))",
            "(assert (MenuItem \"E\" (* 0.15 z)))"
        ]
    },
    {
        "id": 10993,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 98 (+ (Pow 7 (+ x 3)) (Pow 7 2))))",
            "(assert (= ?_id_15_16 x))",
            "(assert (MenuItem \"A\" (- 0 5)))",
            "(assert (MenuItem \"B\" (- 0 3)))",
            "(assert (MenuItem \"C\" (- 0 1)))",
            "(assert (MenuItem \"D\" 1))",
            "(assert (MenuItem \"E\" 3))"
        ]
    },
    {
        "id": 10998,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= _id_33_37 n))",
            "(assert (Between 0.1234 (/ n 1000) (/ (+ n 1) 1000)))",
            "(assert (IsInteger n))",
            "(assert (Not (= ?_id_28_32 _id_33_37)))",
            "(assert (Positive n))",
            "(assert (MenuItem \"A\" 120))",
            "(assert (MenuItem \"B\" 121))",
            "(assert (MenuItem \"C\" 123))",
            "(assert (MenuItem \"D\" 124))",
            "(assert (MenuItem \"E\" 130))"
        ]
    },
    {
        "id": 11001,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ x y) 20))",
            "(assert (= ?_id_13_17 (- x y)))",
            "(assert (IsInteger x))",
            "(assert (IsInteger y))",
            "(assert (Positive x))",
            "(assert (Positive y))",
            "(assert (MenuItem \"A\" (- 0 8)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 8))"
        ]
    },
    {
        "id": 11005,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (+ x 6) (+ ?_id_7_9 (- x 2)))))",
            "(assert (MenuItem \"A\" 4))",
            "(assert (MenuItem \"B\" 6))",
            "(assert (MenuItem \"C\" 8))",
            "(assert (MenuItem \"D\" (+ x 4)))",
            "(assert (MenuItem \"E\" (+ x 8)))"
        ]
    },
    {
        "id": 11006,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Abs (+ (* 3 r) 2)) 17))",
            "(assert (= (Abs (- (* 12 r) 2)) 58))",
            "(assert (= _id_22_26 r))",
            "(assert (Not (= ?_id_20_21 _id_22_26)))",
            "(assert (MenuItem \"A\" (- 0 5)))",
            "(assert (MenuItem \"B\" (- 0 (/ 19 6))))",
            "(assert (MenuItem \"C\" (- 0 3)))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 15))"
        ]
    },
    {
        "id": 11010,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 9 (- (* 2 x) 1)))",
            "(assert (Not (= ?_id_8_9 (- (* 10 x) 5))))",
            "(assert (MenuItem \"A\" 35))",
            "(assert (MenuItem \"B\" 45))",
            "(assert (MenuItem \"C\" 55))",
            "(assert (MenuItem \"D\" 75))",
            "(assert (MenuItem \"E\" 95))"
        ]
    },
    {
        "id": 11013,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Negative k))",
            "(assert (Not (And (Number ?_id_7_11) (Positive ?_id_7_11))))",
            "(assert (MenuItem \"A\" (- k 5)))",
            "(assert (MenuItem \"B\" (+ k 5)))",
            "(assert (MenuItem \"C\" (- (Pow k 2) 5)))",
            "(assert (MenuItem \"D\" (* (+ k 5) (- k 5))))",
            "(assert (MenuItem \"E\" (* k (- k 5))))"
        ]
    },
    {
        "id": 11015,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- 1 (/ 4 b)) (/ 5 3)))",
            "(assert (= _id_2_6 b))",
            "(assert (Not (= ?_id_0_1 _id_2_6)))",
            "(assert (MenuItem \"A\" (- 0 6)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" (/ 1 4)))",
            "(assert (MenuItem \"D\" (/ 2 3)))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 11016,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= _id_14_18 t))",
            "(assert (= q (* (/ 5 4) st)))",
            "(assert (= q 50))",
            "(assert (= s 2))",
            "(assert (= st (* s t)))",
            "(assert (Not (= ?_id_12_13 _id_14_18)))",
            "(assert (MenuItem \"A\" 2.5))",
            "(assert (MenuItem \"B\" 20))",
            "(assert (MenuItem \"C\" 35))",
            "(assert (MenuItem \"D\" 40))",
            "(assert (MenuItem \"E\" 70))"
        ]
    },
    {
        "id": 11023,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 0.008 x) 0.032))",
            "(assert (Not (= ?_id_9_10 (* 0.08 x))))",
            "(assert (MenuItem \"A\" 0.032))",
            "(assert (MenuItem \"B\" 0.32))",
            "(assert (MenuItem \"C\" 3.2))",
            "(assert (MenuItem \"D\" 32))",
            "(assert (MenuItem \"E\" 320))"
        ]
    },
    {
        "id": 11025,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 8 (* 3 (- x 2))))",
            "(assert (= ?_id_10_11 x))"
        ]
    },
    {
        "id": 11028,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (* 3 a) (* 3 (+ b 1))) c))",
            "(assert (Not (= ?_id_13_14 (+ b 1))))",
            "(assert (MenuItem \"A\" (/ c (* 9 a))))",
            "(assert (MenuItem \"B\" (- (/ c 3) a)))",
            "(assert (MenuItem \"C\" (+ (/ c 3) a)))",
            "(assert (MenuItem \"D\" (- (/ c 3) (* 3 a))))",
            "(assert (MenuItem \"E\" (+ (/ c 3) (* 3 a))))"
        ]
    },
    {
        "id": 11029,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 4 (Pow x (/ 1 2))))",
            "(assert (Not (= ?_id_16_17 (Pow x 2))))",
            "(assert (MenuItem \"A\" (/ 1 2)))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 4))",
            "(assert (MenuItem \"D\" 16))",
            "(assert (MenuItem \"E\" 256))"
        ]
    },
    {
        "id": 11032,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 5 (- (/ s t) 4)))",
            "(assert (= 6 (+ (* 5 rt) 2)))",
            "(assert (= rs (* r s)))",
            "(assert (= rs ?_id_0))",
            "(assert (= rt (* r t)))"
        ]
    },
    {
        "id": 11033,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Index 2 _id_5_8) 60))",
            "(assert (Consecutive \"integer\" _id_5_8))",
            "(assert (IsInteger (Index 2 _id_5_8)))",
            "(assert (IsInteger _gen14))",
            "(assert (IsPrototype _gen14 _id_5_8))",
            "(assert (Not (= ?_id_0_1 (Sum _id_5_8))))",
            "(assert (SizeIs _id_5_8 15))",
            "(assert (MenuItem \"A\" 45))",
            "(assert (MenuItem \"B\" 90))",
            "(assert (MenuItem \"C\" 450))",
            "(assert (MenuItem \"D\" 500))",
            "(assert (MenuItem \"E\" 900))"
        ]
    },
    {
        "id": 11038,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 3 a) (- 2 d)))",
            "(assert (= (- (+ a b) c) (+ d 6)))",
            "(assert (= (- c b) 8))",
            "(assert (= _id_27_31 a))",
            "(assert (Not (= ?_id_25_26 _id_27_31)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 8))",
            "(assert (MenuItem \"D\" 12))",
            "(assert (MenuItem \"E\" 16))"
        ]
    },
    {
        "id": 11041,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow x 3) 1))",
            "(assert (Not (= ?_id_7_8 (/ (+ (Pow x 2) 3) x))))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" (/ 1 3)))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" (/ 7 2)))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11043,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 10 (+ (Pow a 2) (Pow b 2))))",
            "(assert (= _id_20_24 ab))",
            "(assert (= a (+ 4 b)))",
            "(assert (= ab (* a b)))",
            "(assert (Not (= ?_id_18_19 _id_20_24)))",
            "(assert (MenuItem \"A\" 13))",
            "(assert (MenuItem \"B\" 6))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" (- 0 3)))",
            "(assert (MenuItem \"E\" (- 0 6)))"
        ]
    },
    {
        "id": 11046,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Cube (Index 1 _gen6)) (* 25 a)))",
            "(assert (= _gen5 a))",
            "(assert (HasPrototype _gen16 _gen5))",
            "(assert (IsInteger (Index 1 _gen6)))",
            "(assert (IsInteger _gen5))",
            "(assert (IsPrototype _gen18 _gen6))",
            "(assert (MemberOf _gen5 _gen6))",
            "(assert (Not (= ?_id_0_1 (Min _gen16))))",
            "(assert (Positive _gen5))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 25))",
            "(assert (MenuItem \"E\" 125))"
        ]
    },
    {
        "id": 11047,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= a (* 3 (+ (+ (* 2 (Pow c 2)) (* 3 c)) 4))))",
            "(assert (= b (+ (- 0 c) 4)))",
            "(assert (Not (= ?_id_23_24 a)))",
            "(assert (MenuItem \"A\" (+ (- (* 6 (Pow b 2)) (* 48 b)) 96)))",
            "(assert (MenuItem \"B\" (+ (- (* 6 (Pow b 2)) (* 57 b)) 132)))",
            "(assert (MenuItem \"C\" (+ (- (* 6 (Pow b 2)) (* 57 b)) 144)))",
            "(assert (MenuItem \"D\" (- (- (* 6 (Pow b 2)) (* 9 b)) 132)))",
            "(assert (MenuItem \"E\" (+ (- (* 6 (Pow b 2)) (* 9 b)) 144)))"
        ]
    },
    {
        "id": 11048,
        "logicalForm": [
            "(assert (Strategy \"MatchWithChoices\"))",
            "(assert (= (/ 1 (Pow 9 xy)) (Pow 3 (+ (Pow x 2) (Pow y 2)))))",
            "(assert (= ?_id_23_24 (+ x y)))",
            "(assert (= xy (* x y)))",
            "(assert (MenuItem \"A\" (- 0 2)))",
            "(assert (MenuItem \"B\" (- 0 1)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 1))",
            "(assert (MenuItem \"E\" 2))"
        ]
    },
    {
        "id": 11052,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (< (Average _id_8_10) 60))",
            "(assert (= ?_id_19_23 (Sum _id_8_10)))",
            "(assert (GreaterThan (Average _id_8_10) 30))",
            "(assert (IsPrototype _gen26 _id_8_10))",
            "(assert (SizeIs _id_8_10 6))",
            "(assert (MenuItem \"A\" 100))",
            "(assert (MenuItem \"B\" 180))",
            "(assert (MenuItem \"C\" 250))",
            "(assert (MenuItem \"D\" 360))",
            "(assert (MenuItem \"E\" 420))"
        ]
    },
    {
        "id": 11057,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Pow 64 (* 2 x)) (Pow 4 (+ (* 4 x) 6))))",
            "(assert (= ?_id_17_18 x))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 3))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 5))"
        ]
    },
    {
        "id": 11062,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_10_11 (- (* 3 a) (* 2 b))))",
            "(assert (= a 3))",
            "(assert (= b (- 0 3)))"
        ]
    },
    {
        "id": 11075,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ?_id_11_15 _id_17_21))",
            "(assert (= _id_17_21 x))",
            "(assert (Increasing (Elements 2 (Abs (- x 4)) 5)))",
            "(assert (MenuItem \"A\" (- 0 6)))",
            "(assert (MenuItem \"B\" (- 0 7)))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 11086,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ 9 (Pow 3 (+ n 2))) m))",
            "(assert (IsInteger n))",
            "(assert (Not (= ?_id_19_20 (Pow 3 n))))",
            "(assert (Positive n))",
            "(assert (MenuItem \"A\" (+ m 3)))",
            "(assert (MenuItem \"B\" (- (Pow m 2) 3)))",
            "(assert (MenuItem \"C\" (/ (+ m 1) 9)))",
            "(assert (MenuItem \"D\" (/ (- m 9) 9)))",
            "(assert (MenuItem \"E\" (* (/ 1 3) m)))"
        ]
    },
    {
        "id": 11087,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (< (Average _id_8_10) 12))",
            "(assert (= ?_id_19_23 (Sum _id_8_10)))",
            "(assert (GreaterThan (Average _id_8_10) 7))",
            "(assert (IsPrototype _gen26 _id_8_10))",
            "(assert (SizeIs _id_8_10 7))",
            "(assert (MenuItem \"A\" 84))",
            "(assert (MenuItem \"B\" 77))",
            "(assert (MenuItem \"C\" 49))",
            "(assert (MenuItem \"D\" 42))",
            "(assert (MenuItem \"E\" 35))"
        ]
    },
    {
        "id": 11097,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (GreaterThan y 0))",
            "(assert (Not (= ?_id_5_6 (* (/ 60 100) (* 20 y)))))",
            "(assert (MenuItem \"A\" (* 1.2 y)))",
            "(assert (MenuItem \"B\" (* 10 y)))",
            "(assert (MenuItem \"C\" (* 12 y)))",
            "(assert (MenuItem \"D\" (* 15 y)))",
            "(assert (MenuItem \"E\" (* 120 y)))"
        ]
    },
    {
        "id": 11104,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= qr (* q r)))",
            "(assert (Prime ?_id_8_12))",
            "(assert (Prime q))",
            "(assert (Prime r))",
            "(assert (MenuItem \"A\" (+ q r)))",
            "(assert (MenuItem \"B\" (- q r)))",
            "(assert (MenuItem \"C\" qr))",
            "(assert (MenuItem \"D\" (+ qr 1)))",
            "(assert (MenuItem \"E\" (+ qr 2)))"
        ]
    },
    {
        "id": 11105,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= _id_14_18 t))",
            "(assert (= q (* (/ 5 4) st)))",
            "(assert (= q 50))",
            "(assert (= s 2))",
            "(assert (= st (* s t)))",
            "(assert (Not (= ?_id_12_13 _id_14_18)))",
            "(assert (MenuItem \"A\" 2.5))",
            "(assert (MenuItem \"B\" 20))",
            "(assert (MenuItem \"C\" 35))",
            "(assert (MenuItem \"D\" 40))",
            "(assert (MenuItem \"E\" 70))"
        ]
    },
    {
        "id": 11107,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (+ k 4) (Abs (- 1 (* 2 k)))))",
            "(assert (= ?_id_12_16 _id_18_22))",
            "(assert (= _id_18_22 k))",
            "(assert (MenuItem \"A\" (- 0 2)))",
            "(assert (MenuItem \"B\" (- 0 1)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11114,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< (Abs (Index 1 _gen1)) 6))",
            "(assert (= ?_id_16_20 (- (Index 1 _gen1) 2)))",
            "(assert (GreaterThan (Abs (Index 1 _gen1)) 3))",
            "(assert (IsInteger (Index 1 _gen1)))",
            "(assert (IsPrototype _gen26 _gen1))",
            "(assert (MenuItem \"A\" (- 0 7)))",
            "(assert (MenuItem \"B\" (- 0 6)))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11115,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ a b) 8))",
            "(assert (= 48 (* 2 (+ ax bx))))",
            "(assert (= _id_12_16 x))",
            "(assert (= ax (* a x)))",
            "(assert (= bx (* b x)))",
            "(assert (Not (= ?_id_10_11 _id_12_16)))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 6))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 18))",
            "(assert (MenuItem \"E\" 24))"
        ]
    },
    {
        "id": 11116,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Pow 3 (+ x 1)) (Pow 9 2)))",
            "(assert (= ?_id_13_14 (Pow x 2)))"
        ]
    },
    {
        "id": 11121,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ 5 d) (/ 3 2)))",
            "(assert (Not (= (* 2 d) ?_id_0)))",
            "(assert (MenuItem \"A\" (+ 1 (/ 2 3))))",
            "(assert (MenuItem \"B\" (+ 3 (/ 1 3))))",
            "(assert (MenuItem \"C\" (+ 6 (/ 2 3))))",
            "(assert (MenuItem \"D\" (+ 7 (/ 1 2))))",
            "(assert (MenuItem \"E\" 15))"
        ]
    },
    {
        "id": 11138,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ?_id_19_20 abc))",
            "(assert (= ab (* a b)))",
            "(assert (= ab 8))",
            "(assert (= abc (* (* a b) c)))",
            "(assert (= ac (* a c)))",
            "(assert (= ac 2))",
            "(assert (= bc (* b c)))",
            "(assert (= bc 4))",
            "(assert (GreaterThan c o))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 8))",
            "(assert (MenuItem \"D\" 32))",
            "(assert (MenuItem \"E\" 64))"
        ]
    },
    {
        "id": 11141,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Consecutive \"even\" (Elements a b c)))",
            "(assert (Increasing (Elements 0 a b c)))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (IsInteger c))",
            "(assert (Not (= ?_id_22_23 (- (Pow c 2) (Pow a 2)))))",
            "(assert (MenuItem \"A\" (+ (* 8 a) 16)))",
            "(assert (MenuItem \"B\" (+ (* 4 a) 4)))",
            "(assert (MenuItem \"C\" (* 8 a)))",
            "(assert (MenuItem \"D\" (+ (* 4 a) 16)))",
            "(assert (MenuItem \"E\" (* 4 a)))"
        ]
    },
    {
        "id": 11147,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* (/ 7 11) b) (* a (/ 7 11))))",
            "(assert (= (/ a b) ?_id_0))",
            "(assert (MenuItem \"A\" (/ 49 121)))",
            "(assert (MenuItem \"B\" (/ 7 11)))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" (/ 11 7)))",
            "(assert (MenuItem \"E\" (/ 121 49)))"
        ]
    },
    {
        "id": 11148,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (< (Average _id_8_10) 12))",
            "(assert (= ?_id_19_23 (Sum _id_8_10)))",
            "(assert (GreaterThan (Average _id_8_10) 10))",
            "(assert (IsPrototype _gen26 _id_8_10))",
            "(assert (SizeIs _id_8_10 8))",
            "(assert (MenuItem \"A\" 70))",
            "(assert (MenuItem \"B\" 80))",
            "(assert (MenuItem \"C\" 90))",
            "(assert (MenuItem \"D\" 100))",
            "(assert (MenuItem \"E\" 110))"
        ]
    },
    {
        "id": 11149,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Abs (+ (* 5 x) 15)) 10))",
            "(assert (= x ?_id_0))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"A\" 5))",
            "(assert (MenuItem \"B\" (- 0 1)))",
            "(assert (MenuItem \"B\" 5))",
            "(assert (MenuItem \"C\" (- 0 1)))",
            "(assert (MenuItem \"C\" (- 0 5)))",
            "(assert (MenuItem \"D\" (- 0 1)))",
            "(assert (MenuItem \"E\" (- 0 5)))"
        ]
    },
    {
        "id": 11151,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Median _id_3_9) 55))",
            "(assert (= ?_id_12_13 (Max _gen23)))",
            "(assert (Consecutive \"integer\" _id_3_9))",
            "(assert (HasPrototype _gen23 _gen13))",
            "(assert (IsInteger _gen13))",
            "(assert (IsInteger _gen37))",
            "(assert (IsPrototype _gen37 _id_3_9))",
            "(assert (MemberOf _gen13 _id_3_9))",
            "(assert (SizeIs _id_3_9 97))"
        ]
    },
    {
        "id": 11157,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= ?_id_41_45 (- (Pow (+ a b) 2) (Pow (- a b) 2))))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" 4))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 18))",
            "(assert (MenuItem \"E\" 20))"
        ]
    },
    {
        "id": 11158,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_26_27 (/ (- (Pow 6 3) 6) (+ (- (Pow 6 2) (* 2 6)) 6)))))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 7))",
            "(assert (MenuItem \"E\" 35))"
        ]
    },
    {
        "id": 11165,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Pow a (/ 2 5)) b))",
            "(assert (= (Pow a 6) ?_id_15_16))",
            "(assert (MenuItem \"A\" (Pow b 2)))",
            "(assert (MenuItem \"B\" (Pow b (/ 12 5))))",
            "(assert (MenuItem \"C\" (Pow b 6)))",
            "(assert (MenuItem \"D\" (Pow b 10)))",
            "(assert (MenuItem \"E\" (Pow b 15)))"
        ]
    },
    {
        "id": 11174,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ y (- y 3)) (/ 42 39)))",
            "(assert (Not (= y ?_id_20_21)))",
            "(assert (MenuItem \"A\" 39))",
            "(assert (MenuItem \"B\" 41))",
            "(assert (MenuItem \"C\" 42))",
            "(assert (MenuItem \"D\" 45))",
            "(assert (MenuItem \"E\" 81))"
        ]
    },
    {
        "id": 11180,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Average _id_8_11) 20.5))",
            "(assert (Consecutive \"integer\" _id_8_11))",
            "(assert (IsInteger _gen10))",
            "(assert (IsPrototype _gen10 _id_8_11))",
            "(assert (Not (= ?_id_14_15 (Average (Take 7 _id_8_11)))))",
            "(assert (SizeIs _id_8_11 14))",
            "(assert (MenuItem \"A\" 10.25))",
            "(assert (MenuItem \"B\" 14.5))",
            "(assert (MenuItem \"C\" 17))",
            "(assert (MenuItem \"D\" 18.25))",
            "(assert (MenuItem \"E\" 19))"
        ]
    },
    {
        "id": 11191,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= xyz (* (* x y) z)))",
            "(assert (Not (= (/ (* (* (Pow x 2) (Pow y 3)) (Pow z 6)) (* (* (Pow x 6) (Pow y 3)) (Pow z 2))) ?_id_0)))",
            "(assert (Not (= xyz 0)))",
            "(assert (MenuItem \"A\" xyz))",
            "(assert (MenuItem \"B\" (/ z x)))",
            "(assert (MenuItem \"C\" (/ (Pow z 2) (Pow x 2))))",
            "(assert (MenuItem \"D\" (/ (Pow z 3) (Pow x 3))))",
            "(assert (MenuItem \"E\" (/ (Pow z 4) (Pow x 4))))"
        ]
    },
    {
        "id": 11194,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (* (/ (- 16 6) 6) 100) (* (/ (- ?_id_16_18 12) 12) 100))))",
            "(assert (MenuItem \"A\" 16))",
            "(assert (MenuItem \"B\" 22))",
            "(assert (MenuItem \"C\" 23))",
            "(assert (MenuItem \"D\" 32))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 11205,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (+ a b) 27))",
            "(assert (= ?_id_20_21 (+ (+ a b) c)))",
            "(assert (= c (- 13 b)))",
            "(assert (= c (- 20 a)))"
        ]
    },
    {
        "id": 11215,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 15 (+ (* 2 a) (* 5 b))))",
            "(assert (= ?_id_15_19 b))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (MenuItem \"A\" (- 0 1)))",
            "(assert (MenuItem \"B\" 1))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 5))"
        ]
    },
    {
        "id": 11216,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 44 (* 4 (+ n 6))))",
            "(assert (= _id_12_16 n))",
            "(assert (Not (= ?_id_10_11 _id_12_16)))",
            "(assert (MenuItem \"A\" (/ 25 2)))",
            "(assert (MenuItem \"B\" (/ 19 2)))",
            "(assert (MenuItem \"C\" 11))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 50))"
        ]
    },
    {
        "id": 11227,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= k 10))",
            "(assert (Not (= ?_id_5_6 (/ (- (* (* 2 k) (+ k 1)) (* (* 2 k) (- k 1))) 4))))",
            "(assert (MenuItem \"A\" 10))",
            "(assert (MenuItem \"B\" 20))",
            "(assert (MenuItem \"C\" 50))",
            "(assert (MenuItem \"D\" 100))",
            "(assert (MenuItem \"E\" 200))"
        ]
    },
    {
        "id": 11229,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (/ 4 (Pow (+ r 4) (/ 1 2))) 2))",
            "(assert (= ?_id_16_17 r))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11244,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Increasing (Elements (- 0 1) x 0)))",
            "(assert (Not (True ?_id_8_12)))",
            "(assert (MenuItem \"A\" (Increasing (Elements x (Pow x 2) (Pow x 3)))))",
            "(assert (MenuItem \"B\" (Increasing (Elements (Pow x 2) x (Pow x 3)))))",
            "(assert (MenuItem \"C\" (Increasing (Elements x (Pow x 3) (Pow x 2)))))",
            "(assert (MenuItem \"D\" (Increasing (Elements (Pow x 3) (Pow x 2) x))))",
            "(assert (MenuItem \"E\" (Increasing (Elements (Pow x 3) x (Pow x 2)))))"
        ]
    },
    {
        "id": 11246,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow k 6) (* (Pow m (- 0 2)) (Pow n 4))))",
            "(assert (= _id_31_35 m))",
            "(assert (Not (= ?_id_26_30 _id_31_35)))",
            "(assert (Positive k))",
            "(assert (Positive m))",
            "(assert (Positive n))",
            "(assert (MenuItem \"A\" (* (Pow k 3) (Pow n 2))))",
            "(assert (MenuItem \"B\" (/ (Pow k 3) (Pow n 2))))",
            "(assert (MenuItem \"C\" (/ 1 (* (Pow k 3) (Pow n 2)))))",
            "(assert (MenuItem \"D\" (/ (Pow k 6) (Pow n 3))))",
            "(assert (MenuItem \"E\" (/ (Pow n 2) (Pow k 3))))"
        ]
    },
    {
        "id": 11260,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< (Abs k) 5))",
            "(assert (Not (True ?_id_7_11)))",
            "(assert (MenuItem \"I\" (Increasing (Elements (- 0 5) k 5))))",
            "(assert (MenuItem \"II\" (< (Pow k 2) 5)))",
            "(assert (MenuItem \"III\" (< (Pow k 3) 5)))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 11268,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< rst 0))",
            "(assert (= rst (* (* r s) t)))",
            "(assert (GreaterThan (* (* (Pow r 3) (Pow s 2)) t) 0))",
            "(assert (Not (True ?_id_17_21)))",
            "(assert (MenuItem \"A\" (GreaterThan r 0)))",
            "(assert (MenuItem \"B\" (< r 0)))",
            "(assert (MenuItem \"C\" (GreaterThan t 0)))",
            "(assert (MenuItem \"D\" (< s 0)))",
            "(assert (MenuItem \"E\" (GreaterThan s 0)))"
        ]
    },
    {
        "id": 11269,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (+ (Pow x (/ 1 2)) n) (+ (Pow x (/ 1 2)) 9)) 1))",
            "(assert (Not (= n ?_id_0)))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 11271,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ w x) 5))",
            "(assert (= (+ y z) 6))",
            "(assert (= wy (* w y)))",
            "(assert (= wz (* w z)))",
            "(assert (= xy (* x y)))",
            "(assert (= xz (* x z)))",
            "(assert (Not (= ?_id_13_14 (+ (+ (+ wy xz) wz) xy))))",
            "(assert (MenuItem \"A\" 11))",
            "(assert (MenuItem \"B\" 22))",
            "(assert (MenuItem \"C\" 30))",
            "(assert (MenuItem \"D\" 41))",
            "(assert (MenuItem \"E\" 60))"
        ]
    },
    {
        "id": 11272,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (GreaterThan y 0))",
            "(assert (Not (= ?_id_5_6 (* (/ 60 100) (* 20 y)))))",
            "(assert (MenuItem \"A\" (* 1.2 y)))",
            "(assert (MenuItem \"B\" (* 10 y)))",
            "(assert (MenuItem \"C\" (* 12 y)))",
            "(assert (MenuItem \"D\" (* 15 y)))",
            "(assert (MenuItem \"E\" (* 120 y)))"
        ]
    },
    {
        "id": 11279,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow ab (/ 1 2)) 6))",
            "(assert (= ?_id_16_20 (- a b)))",
            "(assert (= ab (* a b)))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" 16))",
            "(assert (MenuItem \"B\" 9))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 0))"
        ]
    },
    {
        "id": 11282,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (/ (+ n 1) 2) (+ n (/ n 2))))",
            "(assert (= n ?_id_0))"
        ]
    },
    {
        "id": 11288,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (GreaterThan p 0))",
            "(assert (Not (= (* (Pow p 3) (- (/ 1 p) (/ 1 p))) ?_id_0)))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" 1))",
            "(assert (MenuItem \"C\" p))",
            "(assert (MenuItem \"D\" (Pow p 2)))",
            "(assert (MenuItem \"E\" (Pow p 3)))"
        ]
    },
    {
        "id": 11298,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ?_id_9_13 x))",
            "(assert (GreaterThan (Abs (+ x 3)) 5))",
            "(assert (MenuItem \"A\" (- 0 9)))",
            "(assert (MenuItem \"B\" (- 0 8)))",
            "(assert (MenuItem \"C\" (- 0 3)))",
            "(assert (MenuItem \"D\" 1))",
            "(assert (MenuItem \"E\" 2))"
        ]
    },
    {
        "id": 11299,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< x 0))",
            "(assert (Not (Negative ?_id_0_5)))",
            "(assert (MenuItem \"A\" (+ (+ (Pow x 4) (Pow x 2)) 4)))",
            "(assert (MenuItem \"B\" (- (Pow x 5) 1)))",
            "(assert (MenuItem \"C\" (- (Pow x 6) 1)))",
            "(assert (MenuItem \"D\" (+ (+ (Pow x 6) (Pow x 2)) 1)))",
            "(assert (MenuItem \"E\" (+ (Pow x 2) 10)))"
        ]
    },
    {
        "id": 11301,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Min _gen34) (- 0 33)))",
            "(assert (= (Sum _id_4_9) 34))",
            "(assert (Consecutive \"integer\" _id_4_9))",
            "(assert (HasPrototype _gen34 _gen22))",
            "(assert (IsInteger _gen19))",
            "(assert (IsInteger _gen22))",
            "(assert (IsInteger _gen40))",
            "(assert (IsPrototype _gen19 _id_22_25))",
            "(assert (IsPrototype _gen40 _id_4_9))",
            "(assert (MemberOf _gen19 _id_4_9))",
            "(assert (MemberOf _gen22 _id_4_9))",
            "(assert (Not (SizeIs _id_22_25 ?_gen20)))",
            "(assert (MenuItem \"A\" 33))",
            "(assert (MenuItem \"B\" 34))",
            "(assert (MenuItem \"C\" 66))",
            "(assert (MenuItem \"D\" 67))",
            "(assert (MenuItem \"E\" 68))"
        ]
    },
    {
        "id": 11306,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Divides ?_id_0_4 (- (Pow 9 2) 9)))",
            "(assert (Positive ?_id_0_4))",
            "(assert (MenuItem \"A\" 6))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 18))",
            "(assert (MenuItem \"E\" 32))"
        ]
    },
    {
        "id": 11307,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= q 4))",
            "(assert (= s (* 3 q)))",
            "(assert (Not (= ?_id_10_11 (* 3 s))))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 24))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 11326,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= r 3))",
            "(assert (= s (- r 3)))",
            "(assert (= t (+ 5 s)))",
            "(assert (Not (= ?_id_16_17 t)))",
            "(assert (MenuItem \"A\" (- 0 5)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 8))"
        ]
    },
    {
        "id": 11328,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= abcd (* (* (* a b) c) d)))",
            "(assert (= abcd 3))",
            "(assert (= abce (* (* (* a b) c) e)))",
            "(assert (= abce 0))",
            "(assert (Not (True ?_id_9_13)))",
            "(assert (MenuItem \"A\" (= e 0)))",
            "(assert (MenuItem \"B\" (= c 0)))",
            "(assert (MenuItem \"C\" (GreaterThan a 0)))",
            "(assert (MenuItem \"D\" (< b 0)))",
            "(assert (MenuItem \"E\" (GreaterThan b 3)))"
        ]
    },
    {
        "id": 11339,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (And (Same (* (/ 40 100) 210)) (= (* (/ 40 100) 210) (* (/ (+ 33 (/ 1 3)) 100) ?_id_18_20)))))",
            "(assert (MenuItem \"A\" 840))",
            "(assert (MenuItem \"B\" 280))",
            "(assert (MenuItem \"C\" 252))",
            "(assert (MenuItem \"D\" 175))",
            "(assert (MenuItem \"E\" 84))"
        ]
    },
    {
        "id": 11340,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_26_27 (+ (Pow (* 4 4) 2) (Pow (* 4 4) (/ 1 2))))))",
            "(assert (MenuItem \"A\" 18))",
            "(assert (MenuItem \"B\" 36))",
            "(assert (MenuItem \"C\" 72))",
            "(assert (MenuItem \"D\" 144))",
            "(assert (MenuItem \"E\" 260))"
        ]
    },
    {
        "id": 11349,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (+ (* 3 x) 9) (+ ?_id_8_10 (- (* 3 x) 2)))))",
            "(assert (MenuItem \"A\" 7))",
            "(assert (MenuItem \"B\" 11))",
            "(assert (MenuItem \"C\" (+ (* 3 x) 7)))",
            "(assert (MenuItem \"D\" (+ (* 3 x) 11)))",
            "(assert (MenuItem \"E\" (+ (* 6 x) 7)))"
        ]
    },
    {
        "id": 11362,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 8 (- 8 (- 8 m))))",
            "(assert (Not (= m ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 16)))",
            "(assert (MenuItem \"B\" (- 0 8)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 16))"
        ]
    },
    {
        "id": 11370,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (/ 0.05 100) n) 5))",
            "(assert (Not (= ?_id_8_9 (* (/ 5 100) n))))",
            "(assert (MenuItem \"A\" 900))",
            "(assert (MenuItem \"B\" 700))",
            "(assert (MenuItem \"C\" 500))",
            "(assert (MenuItem \"D\" 0.007))",
            "(assert (MenuItem \"E\" 0.005))"
        ]
    },
    {
        "id": 11374,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (/ 4 5) p) (* 2 (/ q 10))))",
            "(assert (IsInteger p))",
            "(assert (IsInteger q))",
            "(assert (Not (= p (* (/ ?_id_0 100) q))))",
            "(assert (Positive p))",
            "(assert (Positive q))",
            "(assert (MenuItem \"A\" 625))",
            "(assert (MenuItem \"B\" 400))",
            "(assert (MenuItem \"C\" 80))",
            "(assert (MenuItem \"D\" 25))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11376,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* 3 (Sum (Elements a b))) (Product (Elements a b))))",
            "(assert (= ?_id_16_17 (+ (/ 1 a) (/ 1 b))))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (Positive a))",
            "(assert (Positive b))"
        ]
    },
    {
        "id": 11377,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 14 (+ (* 3 x) 2)))",
            "(assert (Not (= ?_id_8_9 (- (* 5 x) 6))))",
            "(assert (MenuItem \"A\" (- 0 1)))",
            "(assert (MenuItem \"B\" 14))",
            "(assert (MenuItem \"C\" 19))",
            "(assert (MenuItem \"D\" 26))",
            "(assert (MenuItem \"E\" 32))"
        ]
    },
    {
        "id": 11385,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= k ?_id_0))",
            "(assert (Increasing (Elements 4 (Pow (* 6 k) (/ 1 2)) 5)))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 7))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 11388,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_19_20 d))",
            "(assert (= a (* 4 b)))",
            "(assert (= a dc))",
            "(assert (= b (* 5 c)))",
            "(assert (= dc (* d c)))",
            "(assert (Not (= a 0)))"
        ]
    },
    {
        "id": 11389,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (+ (* 9 (Pow x (/ 1 2))) 7) 16))",
            "(assert (= x ?_id_0))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 11394,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< (- (* 2 a) (* 2 b)) 0))",
            "(assert (Not ?_id_0_5))",
            "(assert (MenuItem \"A\" (= a b)))",
            "(assert (MenuItem \"B\" (GreaterThan a 0)))",
            "(assert (MenuItem \"C\" (GreaterThan b 0)))",
            "(assert (MenuItem \"D\" (< a b)))",
            "(assert (MenuItem \"E\" (GreaterThan a b)))"
        ]
    },
    {
        "id": 11396,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (- (- a b) 5) 2) 10))",
            "(assert (Not (= ?_id_16_17 (- a b))))",
            "(assert (MenuItem \"A\" 20))",
            "(assert (MenuItem \"B\" 25))",
            "(assert (MenuItem \"C\" 30))",
            "(assert (MenuItem \"D\" 35))",
            "(assert (MenuItem \"E\" 40))"
        ]
    },
    {
        "id": 11401,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (/ 2 (+ n 2)) (/ 1 (- n 1))))",
            "(assert (= ?_id_21_22 n))"
        ]
    },
    {
        "id": 11406,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (/ 1 (Pow (+ a b) (- 0 (/ 1 2)))) (Pow (+ a b) (- 0 (/ 1 2)))))",
            "(assert (True ?_id_41_45))",
            "(assert (MenuItem \"A\" (= a 0)))",
            "(assert (MenuItem \"B\" (= (Pow (+ a b) (/ 1 2)) (- 0 1))))",
            "(assert (MenuItem \"C\" (= (Pow (+ a b) (/ 1 2)) 0)))",
            "(assert (MenuItem \"D\" (= (+ a b) 1)))",
            "(assert (MenuItem \"E\" (= (Pow (+ a b) 2) 0)))"
        ]
    },
    {
        "id": 11417,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- 12 (Index 1 _gen0)) (* 3 (Index 1 _gen0))))",
            "(assert (IsPrototype _gen22 _gen0))",
            "(assert (Not (= ?_id_14_15 (Index 1 _gen0))))",
            "(assert (MenuItem \"A\" (- 0 6)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11426,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Average (Elements p q)) 5))",
            "(assert (= 35 (Average (Elements (Pow p 2) (Pow q 2)))))",
            "(assert (= ?_id_23_24 pq))",
            "(assert (= pq (* p q)))",
            "(assert (MenuItem \"A\" 10))",
            "(assert (MenuItem \"B\" 15))",
            "(assert (MenuItem \"C\" 30))",
            "(assert (MenuItem \"D\" 45))",
            "(assert (MenuItem \"E\" 70))"
        ]
    },
    {
        "id": 11433,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ a b) (/ 1 3)))",
            "(assert (= (/ b c) (/ 3 2)))",
            "(assert (Not (= ?_id_33_34 (/ a c))))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 1))",
            "(assert (MenuItem \"C\" (/ 1 2)))",
            "(assert (MenuItem \"D\" (/ 2 9)))",
            "(assert (MenuItem \"E\" (/ 1 3)))"
        ]
    },
    {
        "id": 11446,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (< _gen3 n))",
            "(assert (Even _gen3))",
            "(assert (IsInteger _gen3))",
            "(assert (IsInteger n))",
            "(assert (IsPrototype _gen3 _id_7_12))",
            "(assert (Odd n))",
            "(assert (Positive _gen3))",
            "(assert (Positive n))",
            "(assert (SizeIs _id_7_12 ?_gen4))",
            "(assert (MenuItem \"A\" (/ (- n 1) 2)))",
            "(assert (MenuItem \"B\" (/ n 2)))",
            "(assert (MenuItem \"C\" (/ (+ n 1) 2)))",
            "(assert (MenuItem \"D\" (- n 1)))",
            "(assert (MenuItem \"E\" (- (* 2 n) 1)))"
        ]
    },
    {
        "id": 11456,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 21 (+ (* 5 x) 3)))",
            "(assert (Not (= (+ (* 5 x) 10) ?_id_0)))",
            "(assert (MenuItem \"A\" 28))",
            "(assert (MenuItem \"B\" 30))",
            "(assert (MenuItem \"C\" 32))",
            "(assert (MenuItem \"D\" 34))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 11460,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ 4 (+ m 6)) (/ 4 (- (* 3 m) 2))))",
            "(assert (= _id_2_6 m))",
            "(assert (Not (= ?_id_0_1 _id_2_6)))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11461,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (/ q 2) (/ 7 10)))",
            "(assert (= ?_id_17_18 q))"
        ]
    },
    {
        "id": 11469,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 6 a) 48))",
            "(assert (= _id_12_16 b))",
            "(assert (= ab (* a b)))",
            "(assert (= ab 1))",
            "(assert (Not (= ?_id_10_11 _id_12_16)))",
            "(assert (MenuItem \"A\" (/ 1 48)))",
            "(assert (MenuItem \"B\" (/ 1 8)))",
            "(assert (MenuItem \"C\" (/ 1 6)))",
            "(assert (MenuItem \"D\" 6))",
            "(assert (MenuItem \"E\" 8))"
        ]
    },
    {
        "id": 11471,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (/ 70 100) x) 2100))",
            "(assert (Not (= ?_id_9_10 (* (/ 40 100) x))))",
            "(assert (MenuItem \"A\" 3000))",
            "(assert (MenuItem \"B\" 2020))",
            "(assert (MenuItem \"C\" 1800))",
            "(assert (MenuItem \"D\" 1470))",
            "(assert (MenuItem \"E\" 1200))"
        ]
    },
    {
        "id": 11485,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_17_21 (+ 4 (/ (- y 4) 2)))))",
            "(assert (MenuItem \"A\" (/ (- y 2) 4)))",
            "(assert (MenuItem \"B\" (/ (+ y 2) 4)))",
            "(assert (MenuItem \"C\" (/ (- y 4) 2)))",
            "(assert (MenuItem \"D\" (/ (+ y 4) 2)))",
            "(assert (MenuItem \"E\" (/ (+ (* 4 y) 4) 2)))"
        ]
    },
    {
        "id": 11488,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 20 (+ (* 3 (Pow (Pow k 2) (/ 1 2))) 8)))",
            "(assert (= ?_id_13_17 _id_19_23))",
            "(assert (= _id_19_23 k))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" (- 0 1)))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 11504,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= w (Pow 3 3)))",
            "(assert (Not (= ?_id_7_12 (Pow 3 8))))",
            "(assert (MenuItem \"A\" (* 5 w)))",
            "(assert (MenuItem \"B\" (Pow w 5)))",
            "(assert (MenuItem \"C\" (* 8 w)))",
            "(assert (MenuItem \"D\" (* 8 (Pow w 2))))",
            "(assert (MenuItem \"E\" (* 9 (Pow w 2))))"
        ]
    },
    {
        "id": 11511,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_0_1 (Square (Index 1 _gen0))))",
            "(assert (GreaterThan ?_id_0_1 1000))",
            "(assert (IsInteger (Index 1 _gen0)))",
            "(assert (IsInteger _gen7))",
            "(assert (IsPrototype _gen7 _gen0))"
        ]
    },
    {
        "id": 11512,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 27 (* (Pow 3 a) (Pow 3 b))))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (Not (= ?_id_19_20 (+ (Pow 3 a) (Pow 3 b)))))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" 9))",
            "(assert (MenuItem \"B\" 12))",
            "(assert (MenuItem \"C\" 18))",
            "(assert (MenuItem \"D\" 27))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 11517,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= a (- 0 2)))",
            "(assert (Not (= ?_id_6_7 (- (+ (- (Pow a 4) (Pow a 3)) (Pow a 2)) a))))",
            "(assert (MenuItem \"A\" (- 0 30)))",
            "(assert (MenuItem \"B\" (- 0 10)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 10))",
            "(assert (MenuItem \"E\" 30))"
        ]
    },
    {
        "id": 11518,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= x 1))",
            "(assert (= xy (* x y)))",
            "(assert (= y (- 0 1)))",
            "(assert (Not (= (+ (+ (Pow x 2) (* 2 xy)) (Pow y 2)) ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 1)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11522,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_25_26 (+ (Pow (- 4 2) 4) (Pow (+ 4 2) 2)))))",
            "(assert (MenuItem \"A\" 52))",
            "(assert (MenuItem \"B\" 44))",
            "(assert (MenuItem \"C\" 28))",
            "(assert (MenuItem \"D\" 20))",
            "(assert (MenuItem \"E\" 16))"
        ]
    },
    {
        "id": 11535,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow x 2) (- (- 100 (* 2 xy)) (Pow y 2))))",
            "(assert (= xy (* x y)))",
            "(assert (Not (True ?_id_14_18)))",
            "(assert (MenuItem \"A\" (= (- x y) 10)))",
            "(assert (MenuItem \"B\" (= (+ (Pow x 2) (Pow y 2)) 100)))",
            "(assert (MenuItem \"C\" (= (* (+ x y) (- x y)) 100)))",
            "(assert (MenuItem \"D\" (= (Pow (+ x y) 2) 100)))",
            "(assert (MenuItem \"E\" (= (Pow (- x y) 2) 100)))"
        ]
    },
    {
        "id": 11545,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 2452 (+ (* 60 q) (* 52 r))))",
            "(assert (= ?_id_17_18 (+ q r)))",
            "(assert (IsInteger q))",
            "(assert (IsInteger r))",
            "(assert (Positive q))",
            "(assert (Positive r))"
        ]
    },
    {
        "id": 11554,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= a (+ (* 9 (Pow c 2)) 4)))",
            "(assert (= b (+ 7 (* 3 c))))",
            "(assert (Not (= ?_id_17_18 a)))",
            "(assert (MenuItem \"A\" (+ (- (* 2 (Pow b 2)) (* 7 b)) 49)))",
            "(assert (MenuItem \"B\" (+ (- (Pow b 2) (* 14 b)) 49)))",
            "(assert (MenuItem \"C\" (+ (+ (Pow b 2) (* 14 b)) 49)))",
            "(assert (MenuItem \"D\" (+ (- (Pow b 2) (* 14 b)) 53)))",
            "(assert (MenuItem \"E\" (+ (+ (Pow b 2) (* 14 b)) 53)))"
        ]
    },
    {
        "id": 11564,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 3 (- (* (* 2 f) 1) 1)))",
            "(assert (= ?_id_30_31 (* f 1)))"
        ]
    },
    {
        "id": 11569,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Average (Elements a b c d e)) 95))",
            "(assert (= (Average (Elements a b e)) 100))",
            "(assert (= ?_id_34_35 (Average (Elements c d))))"
        ]
    },
    {
        "id": 11578,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 4 (/ (- 48 (* 2 x)) (+ x 3))))",
            "(assert (= _id_24_28 x))",
            "(assert (Not (= ?_id_22_23 _id_24_28)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 5))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 12))"
        ]
    },
    {
        "id": 11592,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (+ (* 2 4) (* 3 (* 3 a))) (+ (* 3 4) (* 2 (* 3 a)))))",
            "(assert (= ?_id_52_53 a))"
        ]
    },
    {
        "id": 11602,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Average (Elements x y z)) y))",
            "(assert (Increasing (Elements x y z)))",
            "(assert (Not (True ?_id_23_27)))",
            "(assert (MenuItem \"A\" (= (- z y) 2)))",
            "(assert (MenuItem \"B\" (= (+ (+ x y) z) (* 3 y))))",
            "(assert (MenuItem \"C\" (< (+ x y) z)))",
            "(assert (MenuItem \"D\" (= (+ x y) z)))",
            "(assert (MenuItem \"E\" (= (* 2 z) (* 3 y))))"
        ]
    },
    {
        "id": 11603,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (+ (* 3 d) ed) (- f e)))",
            "(assert (= ?_id_10_11 d))",
            "(assert (= e 2))",
            "(assert (= ed (* e d)))",
            "(assert (= f 9))"
        ]
    },
    {
        "id": 11608,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Pow k (- 0 5)) (* 2 (* 4 (Pow k (- 0 2))))))",
            "(assert (= ?_id_23_24 k))"
        ]
    },
    {
        "id": 11612,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Pow x 2) 81))",
            "(assert (= 54 (* 2 (Pow y 3))))",
            "(assert (= ?_id_21_25 True))",
            "(assert (IsInteger x))",
            "(assert (IsInteger y))",
            "(assert (MenuItem \"I\" (= x 9)))",
            "(assert (MenuItem \"II\" (= y (- 0 3))))",
            "(assert (MenuItem \"III\" (= (+ x y) (- 0 6))))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"I\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"D\" \"III\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 11615,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ?_id_8_12 (Max (ForwardReference _id_10_12 (Slots) (Slots (Slot \"num\" \"plural\"))))))",
            "(assert (Increasing (Elements (- 0 1) y 0)))",
            "(assert (MenuItem \"A\" (Pow y 2)))",
            "(assert (MenuItem \"B\" (- 1 y)))",
            "(assert (MenuItem \"C\" (+ 1 y)))",
            "(assert (MenuItem \"D\" (* 2 y)))",
            "(assert (MenuItem \"E\" (/ 1 (+ y 2))))"
        ]
    },
    {
        "id": 11618,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (* 2 d) (* 2 q)) (- 0 32)))",
            "(assert (= 17 (- (* 3 d) (* 2 q))))",
            "(assert (Not (= ?_id_18_19 (* 10 d))))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" (- 0 3)))",
            "(assert (MenuItem \"C\" (- 0 13)))",
            "(assert (MenuItem \"D\" (- 0 15)))",
            "(assert (MenuItem \"E\" (- 0 30)))"
        ]
    },
    {
        "id": 11619,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= all (* (* a l) l)))",
            "(assert (Not (= ?_id_21_22 (+ (- (+ (- 2 3) 2) 1) 2))))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" 1))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11633,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= k ?_id_0))",
            "(assert (Increasing (Elements (/ (+ k 5) 30) (/ 7 20) (/ k 10))))",
            "(assert (IsInteger k))",
            "(assert (MenuItem \"A\" 5))",
            "(assert (MenuItem \"B\" 6))",
            "(assert (MenuItem \"C\" 7))",
            "(assert (MenuItem \"D\" 8))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 11640,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_30_31 (+ (Pow 16 (/ 1 2)) (Pow 16 (/ 1 4))))))",
            "(assert (MenuItem \"A\" 6))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 32))",
            "(assert (MenuItem \"E\" 64))"
        ]
    },
    {
        "id": 11642,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (* 4 d) 10))",
            "(assert (= 8 (+ d (* 2 h))))",
            "(assert (= ?_id_13_14 h))"
        ]
    },
    {
        "id": 11656,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 153 (+ (Pow x 2) (Pow y 2))))",
            "(assert (= xy (* x y)))",
            "(assert (= xy 36))",
            "(assert (Not (= ?_id_15_16 (Pow (- x y) 2))))",
            "(assert (MenuItem \"A\" 81))",
            "(assert (MenuItem \"B\" 117))",
            "(assert (MenuItem \"C\" 153))",
            "(assert (MenuItem \"D\" 189))",
            "(assert (MenuItem \"E\" 225))"
        ]
    },
    {
        "id": 11664,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 0 (/ (+ x y) x)))",
            "(assert (= _id_15_19 x))",
            "(assert (Not (= ?_id_13_14 _id_15_19)))",
            "(assert (MenuItem \"A\" (- 0 y)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" y))",
            "(assert (MenuItem \"D\" (Pow y 2)))",
            "(assert (MenuItem \"E\" (/ 1 4)))"
        ]
    },
    {
        "id": 11670,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 18 (Median (Elements (* 3 x) (* 5 x) (* (/ 1 2) x)))))",
            "(assert (= ?_id_27_28 x))"
        ]
    },
    {
        "id": 11671,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 29 (+ (Pow m 2) 7)))",
            "(assert (Not (= (- (Pow m 2) 7) ?_id_0)))",
            "(assert (MenuItem \"A\" 15))",
            "(assert (MenuItem \"B\" 22))",
            "(assert (MenuItem \"C\" 71))",
            "(assert (MenuItem \"D\" 78))",
            "(assert (MenuItem \"E\" 484))"
        ]
    },
    {
        "id": 11676,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (/ 30 100) y) (* (/ 20 100) x)))",
            "(assert (GreaterThan x 0))",
            "(assert (Not (= ?_id_15_19 (* (/ 80 100) x))))",
            "(assert (MenuItem \"A\" (* 0.5 y)))",
            "(assert (MenuItem \"B\" (* 0.8 y)))",
            "(assert (MenuItem \"C\" (* 0.9 y)))",
            "(assert (MenuItem \"D\" y))",
            "(assert (MenuItem \"E\" (* 1.2 y)))"
        ]
    },
    {
        "id": 11685,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (Pow (- 0 (* (* 3 (Pow a 2)) (Pow b 5))) 3) ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 (* (* 3 (Pow a 5)) (Pow b 8)))))",
            "(assert (MenuItem \"B\" (- 0 (* (* 3 (Pow a 6)) (Pow b 15)))))",
            "(assert (MenuItem \"C\" (- 0 (* (* 27 (Pow a 5)) (Pow b 8)))))",
            "(assert (MenuItem \"D\" (- 0 (* (* 27 (Pow a 6)) (Pow b 15)))))",
            "(assert (MenuItem \"E\" (* (* 27 (Pow a 6)) (Pow b 15))))"
        ]
    },
    {
        "id": 11689,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 11 (+ (* 2 x) (* 3 y))))",
            "(assert (= 7 (- (* 2 x) y)))",
            "(assert (= _id_2_6 x))",
            "(assert (Not (= ?_id_0_1 _id_2_6)))",
            "(assert (MenuItem \"A\" 4))",
            "(assert (MenuItem \"B\" 6))",
            "(assert (MenuItem \"C\" 9))",
            "(assert (MenuItem \"D\" 11))",
            "(assert (MenuItem \"E\" 32))"
        ]
    },
    {
        "id": 11695,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- 10 (* 2 x)) (* 3 x)))",
            "(assert (Not (= (* (* 5 x) (* 5 x)) ?_id_0)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 20))",
            "(assert (MenuItem \"D\" 25))",
            "(assert (MenuItem \"E\" 100))"
        ]
    },
    {
        "id": 11699,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* k (- (Pow a 2) (Pow b 2))) 0))",
            "(assert (= ?_id_14_18 True))",
            "(assert (MenuItem \"I\" (= k 0)))",
            "(assert (MenuItem \"II\" (And (= a 5) (= b 5))))",
            "(assert (MenuItem \"III\" (= a (- 0 b))))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"III\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 11700,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- 0 12) (+ (+ (* 2 x) (* 4 x)) (* 6 x))))",
            "(assert (Not (= x ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 1)))",
            "(assert (MenuItem \"B\" (- 0 (/ 1 2))))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" (/ 1 2)))",
            "(assert (MenuItem \"E\" 1))"
        ]
    },
    {
        "id": 11706,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Abs t) 2))",
            "(assert (Not (= ?_id_7_8 (* (+ t 3) (- t 3)))))",
            "(assert (MenuItem \"A\" (- 0 5)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 7))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 11713,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- (* 5 x) x) (- (+ (* 2 x) x) 5)))",
            "(assert (Not (= x ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 10)))",
            "(assert (MenuItem \"B\" (- 0 5)))",
            "(assert (MenuItem \"C\" (- 0 1)))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 10))"
        ]
    },
    {
        "id": 11720,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< (* 4 r) (* 8 p)))",
            "(assert (< (* 7 d) (* 4 r)))",
            "(assert (Not (True ?_id_13_17)))",
            "(assert (MenuItem \"A\" (< (* 7 d) (* 8 p))))",
            "(assert (MenuItem \"B\" (< (* 8 p) (* 7 d))))",
            "(assert (MenuItem \"C\" (< p d)))",
            "(assert (MenuItem \"D\" (= r (* 2 p))))",
            "(assert (MenuItem \"E\" (= (* 2 r) p)))"
        ]
    },
    {
        "id": 11725,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* 2 a) 10))",
            "(assert (= (- (Pow a 2) 16) (Pow b 2)))",
            "(assert (= ?_id_17_21 b))",
            "(assert (MenuItem \"A\" (- 0 1)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" 3))"
        ]
    },
    {
        "id": 11727,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (* 3 c) 5) (+ (* 5 c) 3)))",
            "(assert (= _id_13_17 c))",
            "(assert (Not (= ?_id_11_12 _id_13_17)))",
            "(assert (MenuItem \"A\" (- 0 1)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 5))"
        ]
    },
    {
        "id": 11729,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= pk (* p k)))",
            "(assert (Not (= ?_id_0_1 (* (/ p 100) (/ k 2)))))",
            "(assert (MenuItem \"A\" (* 0.5 pk)))",
            "(assert (MenuItem \"B\" (* 0.05 pk)))",
            "(assert (MenuItem \"C\" (* 0.005 pk)))",
            "(assert (MenuItem \"D\" (* 5.0E-4 pk)))",
            "(assert (MenuItem \"E\" (* 50 pk)))"
        ]
    },
    {
        "id": 11739,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Sum _id_3_6) 500))",
            "(assert (= ?_id_9_10 (Median _id_3_6)))",
            "(assert (Consecutive \"integer\" _id_3_6))",
            "(assert (IsInteger _gen9))",
            "(assert (IsPrototype _gen9 _id_3_6))",
            "(assert (SizeIs _id_3_6 5))"
        ]
    },
    {
        "id": 11740,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow x (/ 1 2)) 3))",
            "(assert (Not (= (- (Pow x 2) 1) ?_id_0)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 80))",
            "(assert (MenuItem \"D\" 81))",
            "(assert (MenuItem \"E\" 82))"
        ]
    },
    {
        "id": 11748,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 0.0013 x) 0.013))",
            "(assert (Not (= x ?_id_0)))",
            "(assert (MenuItem \"A\" 0.01))",
            "(assert (MenuItem \"B\" 0.1))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" 10))",
            "(assert (MenuItem \"E\" 100))"
        ]
    },
    {
        "id": 11757,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (IsInteger a))",
            "(assert (Not (And (IsInteger ?_id_7_11) (Even ?_id_7_11))))",
            "(assert (Odd a))",
            "(assert (MenuItem \"A\" (+ a 2)))",
            "(assert (MenuItem \"B\" (Pow a 2)))",
            "(assert (MenuItem \"C\" (Pow a 3)))",
            "(assert (MenuItem \"D\" (- (Pow a 2) a)))",
            "(assert (MenuItem \"E\" (Pow (+ a 2) 2)))"
        ]
    },
    {
        "id": 11762,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< a 0))",
            "(assert (= 36 (Pow (- a 4) 2)))",
            "(assert (Not (= ?_id_15_16 a)))",
            "(assert (MenuItem \"A\" (- 0 32)))",
            "(assert (MenuItem \"B\" (- 0 10)))",
            "(assert (MenuItem \"C\" (- 0 6)))",
            "(assert (MenuItem \"D\" (- 0 4)))",
            "(assert (MenuItem \"E\" (- 0 2)))"
        ]
    },
    {
        "id": 11771,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_29_30 (/ (+ 1007 (* 2 3.5)) (- 1007 (* 2 3.5))))))",
            "(assert (MenuItem \"A\" 1.014))",
            "(assert (MenuItem \"B\" 10.14))",
            "(assert (MenuItem \"C\" 1014))",
            "(assert (MenuItem \"D\" 10140))",
            "(assert (MenuItem \"E\" 101400))"
        ]
    },
    {
        "id": 11774,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 10 (- (* 6 s) (* 2 t))))",
            "(assert (= 14 (- s (* 5 t))))",
            "(assert (Not (= ?_id_16_17 (+ (* 5 s) (* 3 t)))))",
            "(assert (MenuItem \"A\" 24))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" (/ 5 7)))",
            "(assert (MenuItem \"D\" (- 0 4)))",
            "(assert (MenuItem \"E\" (- 0 7)))"
        ]
    },
    {
        "id": 11787,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_21_22 (+ (* (/ 2 5) (/ 1 2)) 5)))"
        ]
    },
    {
        "id": 11790,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 13 (- (* 4 (Pow (Pow k 2) (/ 1 2))) 3)))",
            "(assert (= ?_id_20_21 k))",
            "(assert (IsInteger k))",
            "(assert (Positive k))"
        ]
    },
    {
        "id": 11792,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 24 (- (Pow a 2) (Pow b 2))))",
            "(assert (= ?_id_18_22 (Min _gen15)))",
            "(assert (= _gen10 a))",
            "(assert (HasPrototype _gen15 _gen10))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (MemberOf _gen10 (Elements a b)))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 4))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 11795,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (- 0 1) (- 2 p)))",
            "(assert (= ?_id_25_26 (- (* 2 p) p)))"
        ]
    },
    {
        "id": 11799,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 8 (/ (+ m m) (* m m))))",
            "(assert (= ?_id_19_20 m))",
            "(assert (Not (= m 0)))",
            "(assert (MenuItem \"A\" (/ 1 4)))",
            "(assert (MenuItem \"B\" (/ 1 2)))",
            "(assert (MenuItem \"C\" (/ 2 3)))",
            "(assert (MenuItem \"D\" (/ 3 4)))",
            "(assert (MenuItem \"E\" (/ 4 5)))"
        ]
    },
    {
        "id": 11809,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_25_26 (+ (Pow 3 (- 0 3)) (Pow 3 (/ 3 2))))))",
            "(assert (MenuItem \"A\" (/ (+ 1 (* 3 (Pow 3 (/ 1 2)))) 27)))",
            "(assert (MenuItem \"B\" (/ (+ 1 (* 3 (Pow 3 (/ 1 2)))) 81)))",
            "(assert (MenuItem \"C\" (/ (+ 1 (* 81 (Pow 3 (/ 1 2)))) 27)))",
            "(assert (MenuItem \"D\" (+ 1 (* 27 (Pow 3 (/ 1 2))))))",
            "(assert (MenuItem \"E\" (+ 27 (* 81 (Pow 3 (/ 1 2))))))"
        ]
    },
    {
        "id": 11819,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- (/ z 3) (/ 5 6)) (Abs (- (/ z 3) (/ 5 6)))))",
            "(assert (= _gen3 z))",
            "(assert (HasPrototype _gen10 _gen3))",
            "(assert (IsInteger _gen3))",
            "(assert (IsPrototype _gen11 _gen4))",
            "(assert (MemberOf _gen3 _gen4))",
            "(assert (Not (= ?_id_35_36 (Min _gen10))))",
            "(assert (MenuItem \"A\" (- 0 3)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 11824,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_69_70 x))",
            "(assert (= x (+ (+ (+ (- 2 (/ 1 3)) (- (/ 1 3) (/ 1 5))) (- (/ 1 5) (/ 1 7))) (- (/ 1 7) (/ 1 9)))))"
        ]
    },
    {
        "id": 11826,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- 0 4) (- (+ a (* 3 b)) (* 2 c))))",
            "(assert (= 12 (- (+ (* 3 a) (* 5 b)) (* 4 c))))",
            "(assert (Not (= ?_id_23_24 (- a b))))",
            "(assert (MenuItem \"A\" 4))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 16))",
            "(assert (MenuItem \"D\" 20))",
            "(assert (MenuItem \"E\" \"allOfTheAbove\"))"
        ]
    },
    {
        "id": 11827,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 15 (Average (Elements (* 2 a) b))))",
            "(assert (= 20 (Average (Elements (* 2 a) b (* 3 c)))))",
            "(assert (= _id_30_34 c))",
            "(assert (Not (= ?_id_28_29 _id_30_34)))",
            "(assert (MenuItem \"A\" 5))",
            "(assert (MenuItem \"B\" 10))",
            "(assert (MenuItem \"C\" 15))",
            "(assert (MenuItem \"D\" 20))",
            "(assert (MenuItem \"E\" 25))"
        ]
    },
    {
        "id": 11832,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< (+ a b) 0))",
            "(assert (< c 0))",
            "(assert (= ac (* a c)))",
            "(assert (= bc (* b c)))",
            "(assert (Not (True ?_id_11_15)))",
            "(assert (MenuItem \"A\" (< (+ a b) c)))",
            "(assert (MenuItem \"B\" (< (+ (/ a c) (/ b c)) 0)))",
            "(assert (MenuItem \"C\" (GreaterThan (+ ac bc) 0)))",
            "(assert (MenuItem \"D\" (GreaterThan (+ (+ a b) c) 0)))",
            "(assert (MenuItem \"E\" (GreaterThan (- (+ a b) c) 0)))"
        ]
    },
    {
        "id": 11836,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= 27 (- (* 2 k) 11)))",
            "(assert (= ?_id_8_9 k))"
        ]
    },
    {
        "id": 11838,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= ?_id_30_34 _id_36_40))",
            "(assert (= _id_36_40 m))",
            "(assert (= k (Pow (/ 1 64) (/ 1 m))))",
            "(assert (IsInteger k))",
            "(assert (Positive k))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" 0))",
            "(assert (MenuItem \"E\" (- 0 1)))"
        ]
    },
    {
        "id": 11844,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ a b) 3))",
            "(assert (= (/ b c) (/ 1 2)))",
            "(assert (= (/ c d) (/ 2 3)))",
            "(assert (Not (= ?_id_44_45 (/ (* 2 a) d))))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" (/ 3 2)))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" (/ 5 2)))",
            "(assert (MenuItem \"E\" 3))"
        ]
    },
    {
        "id": 11848,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Average _id_7_9) (* 2 (Difference _id_7_9))))",
            "(assert (= (Max _id_7_9) 35))",
            "(assert (IsPrototype _gen30 _id_7_9))",
            "(assert (Not (= ?_id_28_29 (Min _id_7_9))))",
            "(assert (Positive (Difference _id_7_9)))",
            "(assert (SizeIs _id_7_9 2))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 9))",
            "(assert (MenuItem \"C\" 15))",
            "(assert (MenuItem \"D\" 21))",
            "(assert (MenuItem \"E\" 27))"
        ]
    },
    {
        "id": 11862,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (Pow (- 0 (* (* 3 (Pow a 2)) (Pow b 6))) 3) ?_id_0)))",
            "(assert (MenuItem \"A\" (* (* 9 (Pow a 5)) (Pow b 9))))",
            "(assert (MenuItem \"B\" (- 0 (* (* 9 (Pow a 5)) (Pow b 9)))))",
            "(assert (MenuItem \"C\" (* (* 9 (Pow a 6)) (Pow b 18))))",
            "(assert (MenuItem \"D\" (* (* 27 (Pow a 6)) (Pow b 18))))",
            "(assert (MenuItem \"E\" (- 0 (* (* 27 (Pow a 6)) (Pow b 18)))))"
        ]
    },
    {
        "id": 11863,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_23_24 (+ (+ a b) c)))",
            "(assert (= a (* (/ 30 100) 400)))",
            "(assert (= b (* (/ 40 100) a)))",
            "(assert (= c (* (/ 25 100) b)))"
        ]
    },
    {
        "id": 11864,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (< (+ 3 x) 0))",
            "(assert (< (+ 7 x) 5))",
            "(assert (= ?_id_13_17 _id_19_23))",
            "(assert (= _id_19_23 x))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" (- 0 3)))",
            "(assert (MenuItem \"E\" (- 0 4)))"
        ]
    },
    {
        "id": 11868,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (BetweenIncl _gen30 8 30))",
            "(assert (BetweenIncl _gen31 5 27))",
            "(assert (Even _gen30))",
            "(assert (IsInteger _gen30))",
            "(assert (IsInteger _gen31))",
            "(assert (IsPrototype _gen30 _id_20_29))",
            "(assert (IsPrototype _gen31 _id_4_14))",
            "(assert (Not (= (- (Sum _id_20_29) (Sum _id_4_14)) ?_id_0)))",
            "(assert (Odd _gen31))",
            "(assert (MenuItem \"A\" 1))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 27))",
            "(assert (MenuItem \"D\" 30))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 11881,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (/ a b) 3))",
            "(assert (= (/ b c) (/ 1 5)))",
            "(assert (= ?_id_27_28 (/ (* 5 a) c)))"
        ]
    },
    {
        "id": 11882,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< (/ p q) pq))",
            "(assert (= pq (* p q)))",
            "(assert (Not (True ?_id_18_22)))",
            "(assert (Positive p))",
            "(assert (Positive q))",
            "(assert (MenuItem \"I\" (GreaterThan p 1)))",
            "(assert (MenuItem \"II\" (GreaterThan q 1)))",
            "(assert (MenuItem \"III\" (GreaterThan p q)))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 11888,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (Pow (* (* 3 (Pow a 2)) (Pow b 3)) 3) ?_id_0)))",
            "(assert (MenuItem \"A\" (* (* 9 (Pow a 3)) (Pow b 6))))",
            "(assert (MenuItem \"B\" (* (* 9 (Pow a 6)) (Pow b 9))))",
            "(assert (MenuItem \"C\" (* (* 27 (Pow a 3)) (Pow b 6))))",
            "(assert (MenuItem \"D\" (* (* 27 (Pow a 6)) (Pow b 9))))",
            "(assert (MenuItem \"E\" (* (* 27 (Pow a 8)) (Pow b 27))))"
        ]
    },
    {
        "id": 11903,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_35_36 (- (+ (Pow 6 2) (Pow 7 2)) (- (Pow 6 2) (Pow 7 2)))))",
            "(assert (IsPrototype _gen79 _id_1_3))"
        ]
    },
    {
        "id": 11906,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 0 (- (Pow x 2) 49)))",
            "(assert (= ?_id_9_13 x))",
            "(assert (MenuItem \"A\" (- 0 7)))",
            "(assert (MenuItem \"B\" (- 0 3)))",
            "(assert (MenuItem \"C\" 0))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 14))"
        ]
    },
    {
        "id": 11910,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (+ (- 0 (Pow a 3)) 9) (+ (- 0 (Pow a 3)) (Pow b 2))))",
            "(assert (= b ?_id_21_25))",
            "(assert (MenuItem \"A\" (- 0 9)))",
            "(assert (MenuItem \"B\" (- 0 (Pow 9 (/ 1 3)))))",
            "(assert (MenuItem \"C\" (Pow 9 (/ 1 3))))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 9))"
        ]
    },
    {
        "id": 11915,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Average _id_4_6) ?_id_25_29))",
            "(assert (Between (Sum _id_4_6) 53 57))",
            "(assert (IsPrototype _gen10 _id_4_6))",
            "(assert (SizeIs _id_4_6 4))",
            "(assert (MenuItem \"A\" (+ 11 (/ 1 2))))",
            "(assert (MenuItem \"B\" 12))",
            "(assert (MenuItem \"C\" (+ 12 (/ 1 2))))",
            "(assert (MenuItem \"D\" 13))",
            "(assert (MenuItem \"E\" 14))"
        ]
    },
    {
        "id": 11926,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 3 x) 12))",
            "(assert (Not (= (* 5 x) ?_id_0)))",
            "(assert (MenuItem \"A\" 2.4))",
            "(assert (MenuItem \"B\" 14))",
            "(assert (MenuItem \"C\" 15))",
            "(assert (MenuItem \"D\" 20))",
            "(assert (MenuItem \"E\" 60))"
        ]
    },
    {
        "id": 11928,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow (- x y) 2) (+ (Pow x 2) (Pow y 2))))",
            "(assert (= xy (* x y)))",
            "(assert (Not (True ?_id_17_22)))",
            "(assert (MenuItem \"I\" (= x 0)))",
            "(assert (MenuItem \"II\" (= y 0)))",
            "(assert (MenuItem \"III\" (= xy 0)))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 11930,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= tr (* t r)))",
            "(assert (Not (= ?_id_19_23 (* 6 (- t r)))))",
            "(assert (MenuItem \"A\" (/ (- t r) 6)))",
            "(assert (MenuItem \"B\" (- (* 6 t) r)))",
            "(assert (MenuItem \"C\" (- (* 6 t) (* 6 r))))",
            "(assert (MenuItem \"D\" (* 12 (- t r))))",
            "(assert (MenuItem \"E\" (* 36 tr)))"
        ]
    },
    {
        "id": 11932,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Pow 2 (- (* 2 x) 3)) 8))",
            "(assert (= ?_id_13_14 x))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" 1))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 11938,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Min _gen34) (- 0 30)))",
            "(assert (= (Sum _id_4_10) 66))",
            "(assert (Consecutive \"even\" _id_4_10))",
            "(assert (HasPrototype _gen34 _gen22))",
            "(assert (IsInteger _gen19))",
            "(assert (IsInteger _gen22))",
            "(assert (IsInteger _gen40))",
            "(assert (IsPrototype _gen19 _id_23_26))",
            "(assert (IsPrototype _gen40 _id_4_10))",
            "(assert (MemberOf _gen19 _id_4_10))",
            "(assert (MemberOf _gen22 _id_4_10))",
            "(assert (Not (SizeIs _id_23_26 ?_gen20)))",
            "(assert (MenuItem \"A\" 12))",
            "(assert (MenuItem \"B\" 14))",
            "(assert (MenuItem \"C\" 30))",
            "(assert (MenuItem \"D\" 33))",
            "(assert (MenuItem \"E\" 35))"
        ]
    },
    {
        "id": 11942,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ (* (+ x y) (- x y)) (* (- 4 y) (- 2 y))) 0))",
            "(assert (= _id_28_32 y))",
            "(assert (= x 8))",
            "(assert (Not (= ?_id_26_27 _id_28_32)))",
            "(assert (MenuItem \"A\" (- 0 12)))",
            "(assert (MenuItem \"B\" (- 0 (+ 9 (/ 1 3)))))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" (+ 9 (/ 1 3))))",
            "(assert (MenuItem \"E\" 12))"
        ]
    },
    {
        "id": 11943,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- x y) 10))",
            "(assert (= 40 (- (Pow x 2) (Pow y 2))))",
            "(assert (Not (= y ?_id_0)))",
            "(assert (MenuItem \"A\" 14))",
            "(assert (MenuItem \"B\" 7))",
            "(assert (MenuItem \"C\" 4))",
            "(assert (MenuItem \"D\" (- 0 3)))",
            "(assert (MenuItem \"E\" (- 0 6)))"
        ]
    },
    {
        "id": 11950,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= ab (* a b)))",
            "(assert (DivisibleBy ?_id_9_13 3))",
            "(assert (DivisibleBy a 3))",
            "(assert (DivisibleBy b 3))",
            "(assert (Positive ?_id_9_13))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" (+ a b)))",
            "(assert (MenuItem \"B\" (- a b)))",
            "(assert (MenuItem \"C\" (+ (+ a b) 1)))",
            "(assert (MenuItem \"D\" ab))",
            "(assert (MenuItem \"E\" (+ ab 3)))"
        ]
    },
    {
        "id": 11957,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_24_25 (- (Pow (* 3 (- 0 10)) 2) (* 3 (* 3 (- 0 10)))))))",
            "(assert (MenuItem \"A\" 210))",
            "(assert (MenuItem \"B\" 390))",
            "(assert (MenuItem \"C\" 490))",
            "(assert (MenuItem \"D\" 810))",
            "(assert (MenuItem \"E\" 990))"
        ]
    },
    {
        "id": 11967,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (* (/ ?_id_0 100) (* 3 c)) 9)))",
            "(assert (Positive c))",
            "(assert (MenuItem \"A\" (/ c 100)))",
            "(assert (MenuItem \"B\" (/ (* 100 c) 3)))",
            "(assert (MenuItem \"C\" (/ 9 c)))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" (/ 300 c)))"
        ]
    },
    {
        "id": 11971,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- (Index 1 _gen1) 3) (+ 5 (* 3 (Index 1 _gen1)))))",
            "(assert (IsPrototype _gen10 _gen1))",
            "(assert (Not (= ?_id_16_17 (Index 1 _gen1))))",
            "(assert (MenuItem \"A\" (- 0 7)))",
            "(assert (MenuItem \"B\" (- 0 4)))",
            "(assert (MenuItem \"C\" (- 0 (/ 1 2))))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 7))"
        ]
    },
    {
        "id": 11981,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (/ 50 100) (* (/ 40 100) (Index 1 _gen0))) 22.8))",
            "(assert (IsPrototype _gen15 _gen0))",
            "(assert (Not (= ?_id_12_13 (Index 1 _gen0))))",
            "(assert (MenuItem \"A\" 25.3))",
            "(assert (MenuItem \"B\" 45.6))",
            "(assert (MenuItem \"C\" 57))",
            "(assert (MenuItem \"D\" 85.5))",
            "(assert (MenuItem \"E\" 114))"
        ]
    },
    {
        "id": 11988,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (Pow x 2) 9))",
            "(assert (Not (= ?_id_7_8 (- (/ 4 (+ x 1)) (/ 4 (- x 1))))))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 2))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" (- 0 1)))",
            "(assert (MenuItem \"E\" (- 0 2)))"
        ]
    },
    {
        "id": 11989,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (* (/ 1 3) 60) (* (/ ?_id_0 100) 50))))",
            "(assert (MenuItem \"A\" (+ 16 (/ 2 3))))",
            "(assert (MenuItem \"B\" 20))",
            "(assert (MenuItem \"C\" (+ 33 (/ 1 3))))",
            "(assert (MenuItem \"D\" 40))",
            "(assert (MenuItem \"E\" 60))"
        ]
    },
    {
        "id": 12003,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ y 4) 13))",
            "(assert (Not (= (- y 2) ?_id_0)))",
            "(assert (MenuItem \"A\" 7))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 9))",
            "(assert (MenuItem \"D\" 10))",
            "(assert (MenuItem \"E\" 11))"
        ]
    },
    {
        "id": 12004,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Consecutive \"integer\" _id_3_7))",
            "(assert (DivisibleBy (Sum _id_3_7) ?_id_0))",
            "(assert (IsInteger _gen10))",
            "(assert (IsPrototype _gen10 _id_3_7))",
            "(assert (Positive _gen10))",
            "(assert (SizeIs _id_3_7 2))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 7))",
            "(assert (MenuItem \"E\" 211))"
        ]
    },
    {
        "id": 12013,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= x (+ y 2)))",
            "(assert (= y 4))",
            "(assert (Not (= (* (/ 3 2) x) ?_id_0)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 9))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 18))",
            "(assert (MenuItem \"E\" 24))"
        ]
    },
    {
        "id": 12017,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= a (+ (* 3 n) 4)))",
            "(assert (= b (+ 7 (* 9 (Pow n 2)))))",
            "(assert (Not (= ?_id_17_18 b)))",
            "(assert (MenuItem \"A\" (+ (+ (Pow a 2) (* 8 a)) 23)))",
            "(assert (MenuItem \"B\" (+ (- (Pow a 2) (* 8 a)) 23)))",
            "(assert (MenuItem \"C\" (+ (- (* 9 (Pow a 2)) (* 108 a)) 144)))",
            "(assert (MenuItem \"D\" (+ (- (* 9 (Pow a 2)) (* 108 a)) 148)))",
            "(assert (MenuItem \"E\" (+ (+ (* 9 (Pow a 2)) (* 108 a)) 148)))"
        ]
    },
    {
        "id": 12022,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Average _id_3_10) 18))",
            "(assert (= ?_id_13_14 (Max _gen18)))",
            "(assert (Consecutive \"odd\" _id_3_10))",
            "(assert (HasPrototype _gen18 _gen8))",
            "(assert (IsInteger _gen32))",
            "(assert (IsPrototype _gen32 _id_3_10))",
            "(assert (MemberOf _gen8 _id_3_10))",
            "(assert (SizeIs _id_3_10 8))"
        ]
    },
    {
        "id": 12034,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ 14 27) (/ (* 2 k) (+ (* 2 k) 13))))",
            "(assert (Not (= k ?_id_0)))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 5))",
            "(assert (MenuItem \"C\" 7))",
            "(assert (MenuItem \"D\" 14))",
            "(assert (MenuItem \"E\" 28))"
        ]
    },
    {
        "id": 12039,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (< (* 3 b) (* 10 c)))",
            "(assert (< (* 8 a) (* 3 b)))",
            "(assert (Not (True ?_id_13_17)))",
            "(assert (MenuItem \"A\" (< (* 8 a) (* 10 c))))",
            "(assert (MenuItem \"B\" (< (* 10 c) (* 8 a))))",
            "(assert (MenuItem \"C\" (< c a)))",
            "(assert (MenuItem \"D\" (= (* 8 a) (* 10 c))))",
            "(assert (MenuItem \"E\" (= (+ (* 8 a) 1) (* 10 c))))"
        ]
    },
    {
        "id": 12040,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 7 (- (Pow a 2) (Pow b 2))))",
            "(assert (= _id_27_31 ab))",
            "(assert (= ab (* a b)))",
            "(assert (GreaterThan a b))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (Not (= ?_id_25_26 _id_27_31)))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" 6))",
            "(assert (MenuItem \"B\" 8))",
            "(assert (MenuItem \"C\" 10))",
            "(assert (MenuItem \"D\" 12))",
            "(assert (MenuItem \"E\" 14))"
        ]
    },
    {
        "id": 12046,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (GreaterThan (Abs p) 10))",
            "(assert (Not (True ?_id_7_11)))",
            "(assert (MenuItem \"I\" (GreaterThan p 10)))",
            "(assert (MenuItem \"II\" (GreaterThan (Pow p 2) 10)))",
            "(assert (MenuItem \"III\" (GreaterThan (Pow p 3) 10)))",
            "(assert (ComboItem \"A\" \"I\"))",
            "(assert (ComboItem \"B\" \"II\"))",
            "(assert (ComboItem \"C\" \"III\"))",
            "(assert (ComboItem \"D\" \"I\"))",
            "(assert (ComboItem \"D\" \"II\"))",
            "(assert (ComboItem \"E\" \"I\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 12048,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_24_25 (/ (- (Pow 7 2) 7) (+ 7 7)))))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 4))",
            "(assert (MenuItem \"D\" 7))",
            "(assert (MenuItem \"E\" 12))"
        ]
    },
    {
        "id": 12051,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (- (- (Pow x 2) (* 4 x)) 12) 0))",
            "(assert (Not (= ?_id_12_13 (- (* 2 (Pow x 2)) (* 8 x)))))",
            "(assert (MenuItem \"A\" 0))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 16))",
            "(assert (MenuItem \"E\" 24))"
        ]
    },
    {
        "id": 12056,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* (/ 20 100) (* (/ 30 100) (Index 1 _gen1))) (* (/ 15 100) (* (/ h 100) (Index 1 _gen1)))))",
            "(assert (= _id_25_29 h))",
            "(assert (IsPrototype _gen12 _gen1))",
            "(assert (Not (= ?_id_23_24 _id_25_29)))",
            "(assert (Positive (Index 1 _gen1)))",
            "(assert (MenuItem \"A\" 30))",
            "(assert (MenuItem \"B\" 35))",
            "(assert (MenuItem \"C\" 40))",
            "(assert (MenuItem \"D\" 45))",
            "(assert (MenuItem \"E\" 60))"
        ]
    },
    {
        "id": 12068,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 12 (+ (+ (/ 1 a) (/ 1 a)) (/ 1 a))))",
            "(assert (Not (= a ?_id_0)))",
            "(assert (MenuItem \"A\" (/ 1 12)))",
            "(assert (MenuItem \"B\" (/ 1 4)))",
            "(assert (MenuItem \"C\" (/ 1 3)))",
            "(assert (MenuItem \"D\" 3))",
            "(assert (MenuItem \"E\" 4))"
        ]
    },
    {
        "id": 12069,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 2 (Sum _id_4_7)) (- (* 5 (Min _id_4_7)) k)))",
            "(assert (Consecutive \"integer\" _id_4_7))",
            "(assert (IsInteger (Max _id_4_7)))",
            "(assert (IsInteger (Min _id_4_7)))",
            "(assert (IsInteger _gen24))",
            "(assert (IsInteger k))",
            "(assert (IsPrototype _gen24 _id_4_7))",
            "(assert (Not (= ?_id_24_25 (Max _id_4_7))))",
            "(assert (Positive k))",
            "(assert (SizeIs _id_4_7 2))",
            "(assert (MenuItem \"A\" (+ k 2)))",
            "(assert (MenuItem \"B\" (+ k 3)))",
            "(assert (MenuItem \"C\" (+ k 5)))",
            "(assert (MenuItem \"D\" (+ (* 2 k) 2)))",
            "(assert (MenuItem \"E\" (+ (* 2 k) 6)))"
        ]
    },
    {
        "id": 12071,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (+ a 4) (+ b 4)) (/ (+ a 2) (+ b 2))))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (Not (True ?_id_33_37)))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"I\" (= a b)))",
            "(assert (MenuItem \"II\" (= a 2)))",
            "(assert (MenuItem \"III\" (= b (* 2 a))))",
            "(assert (ComboItem \"A\" \"noneOfTheAbove\"))",
            "(assert (ComboItem \"B\" \"I\"))",
            "(assert (ComboItem \"C\" \"II\"))",
            "(assert (ComboItem \"D\" \"III\"))",
            "(assert (ComboItem \"E\" \"II\"))",
            "(assert (ComboItem \"E\" \"III\"))"
        ]
    },
    {
        "id": 12073,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (GreaterThan (Pow g (/ 2 3)) 4))",
            "(assert (Not (True ?_id_15_19)))",
            "(assert (MenuItem \"A\" (GreaterThan g 8)))",
            "(assert (MenuItem \"B\" (GreaterThan g 2)))",
            "(assert (MenuItem \"C\" (< g 2)))",
            "(assert (MenuItem \"D\" (< g 8)))",
            "(assert (MenuItem \"E\" \"noneOfTheAbove\"))"
        ]
    },
    {
        "id": 12075,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (+ (Pow (+ x 3) (/ 1 2)) 3) 9))",
            "(assert (= x ?_id_0))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 33))",
            "(assert (MenuItem \"C\" 39))",
            "(assert (MenuItem \"D\" 69))",
            "(assert (MenuItem \"E\" 75))"
        ]
    },
    {
        "id": 12077,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= ab (* a b)))",
            "(assert (IsInteger a))",
            "(assert (IsInteger b))",
            "(assert (Not (= ?_id_8_9 (* (/ a 100) (* (/ b 100) 200)))))",
            "(assert (Positive a))",
            "(assert (Positive b))",
            "(assert (MenuItem \"A\" (/ ab 100)))",
            "(assert (MenuItem \"B\" (/ ab 50)))",
            "(assert (MenuItem \"C\" ab))",
            "(assert (MenuItem \"D\" (* 50 ab)))",
            "(assert (MenuItem \"E\" (* 100 ab)))"
        ]
    },
    {
        "id": 12078,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Pow 27 5) (+ (+ (Pow 3 k) (Pow 3 k)) (Pow 3 k))))",
            "(assert (= ?_id_19_20 k))",
            "(assert (MenuItem \"A\" 15))",
            "(assert (MenuItem \"B\" 14))",
            "(assert (MenuItem \"C\" 9))",
            "(assert (MenuItem \"D\" 6))",
            "(assert (MenuItem \"E\" 3))"
        ]
    },
    {
        "id": 12085,
        "logicalForm": [
            "(assert (Strategy \"MatchWithChoices\"))",
            "(assert (= (Difference (Elements (Max _gen30) (Min _gen63))) ?_id_0))",
            "(assert (= 17 (+ (* 3 x) y)))",
            "(assert (= _gen24 y))",
            "(assert (= _gen55 y))",
            "(assert (HasPrototype _gen30 _gen24))",
            "(assert (HasPrototype _gen63 _gen55))",
            "(assert (IsInteger x))",
            "(assert (IsInteger y))",
            "(assert (MemberOf _gen24 (Elements x y)))",
            "(assert (MemberOf _gen55 (Elements x y)))",
            "(assert (Positive x))",
            "(assert (Positive y))",
            "(assert (MenuItem \"A\" 16))",
            "(assert (MenuItem \"B\" 14))",
            "(assert (MenuItem \"C\" 12))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 2))"
        ]
    },
    {
        "id": 12095,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ b 6) 3))",
            "(assert (= _id_19_23 a))",
            "(assert (= a (- 16 b)))",
            "(assert (Not (= ?_id_17_18 _id_19_23)))",
            "(assert (MenuItem \"A\" (- 0 4)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" 4))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 12099,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 5 (* (/ (* 0.1 k) 100) n)))",
            "(assert (Not (= ?_id_9_10 (* (/ (* 3 k) 100) n))))",
            "(assert (MenuItem \"A\" 15))",
            "(assert (MenuItem \"B\" 50))",
            "(assert (MenuItem \"C\" 75))",
            "(assert (MenuItem \"D\" 120))",
            "(assert (MenuItem \"E\" 150))"
        ]
    },
    {
        "id": 12100,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= a (* 3 (+ (+ (* 2 (Pow c 2)) (* 3 c)) 4))))",
            "(assert (= b (+ (- 0 c) 4)))",
            "(assert (Not (= ?_id_23_24 a)))",
            "(assert (MenuItem \"A\" (+ (- (* 6 (Pow b 2)) (* 48 b)) 96)))",
            "(assert (MenuItem \"B\" (+ (- (* 6 (Pow b 2)) (* 57 b)) 132)))",
            "(assert (MenuItem \"C\" (+ (- (* 6 (Pow b 2)) (* 57 b)) 144)))",
            "(assert (MenuItem \"D\" (- (- (* 6 (Pow b 2)) (* 9 b)) 132)))",
            "(assert (MenuItem \"E\" (+ (- (* 6 (Pow b 2)) (* 9 b)) 144)))"
        ]
    },
    {
        "id": 12103,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Increasing (Elements (- 0 3) k 3)))",
            "(assert (Not (True ?_id_8_12)))",
            "(assert (MenuItem \"A\" (< (Pow k 2) 3)))",
            "(assert (MenuItem \"B\" (GreaterThan (Pow k 2) 3)))",
            "(assert (MenuItem \"C\" (GreaterThan (Abs k) 3)))",
            "(assert (MenuItem \"D\" (GreaterThan (Pow k 2) 9)))",
            "(assert (MenuItem \"E\" (< (Pow k 2) 9)))"
        ]
    },
    {
        "id": 12104,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (+ a b) (Pow (+ (Pow a 2) (Pow b 2)) (/ 1 2))))",
            "(assert (= ab (* a b)))",
            "(assert (Not (True ?_id_16_20)))",
            "(assert (MenuItem \"A\" (And (= a 0) (= b 0))))",
            "(assert (MenuItem \"B\" (= (+ a b) 0)))",
            "(assert (MenuItem \"C\" (= ab 0)))",
            "(assert (MenuItem \"D\" (Or (Not (= ab 0)))))",
            "(assert (MenuItem \"E\" (= (- (Pow a 2) (Pow b 2)) 0)))"
        ]
    },
    {
        "id": 12107,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* (Pow 8 n) (Pow 4 2)) (Pow 2 10)))",
            "(assert (= ?_id_13_14 n))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 4))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 6))"
        ]
    },
    {
        "id": 12109,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ a b) 8))",
            "(assert (= (/ a c) 4))",
            "(assert (= b 2))",
            "(assert (Not (= c ?_id_22_23)))",
            "(assert (MenuItem \"A\" 2))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 8))",
            "(assert (MenuItem \"D\" 10))",
            "(assert (MenuItem \"E\" 16))"
        ]
    },
    {
        "id": 12116,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 15 (+ (* 3 a) b)))",
            "(assert (= 9 (- (* 5 a) b)))",
            "(assert (Not (= (+ a b) ?_id_0)))",
            "(assert (MenuItem \"A\" (- 0 3)))",
            "(assert (MenuItem \"B\" 3))",
            "(assert (MenuItem \"C\" 5))",
            "(assert (MenuItem \"D\" 9))",
            "(assert (MenuItem \"E\" 12))"
        ]
    },
    {
        "id": 12117,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (+ 7 (/ 3 7)) (+ (/ 3 x) x)))",
            "(assert (= x ?_id_25_29))",
            "(assert (MenuItem \"A\" (/ 1 7)))",
            "(assert (MenuItem \"B\" (/ 2 7)))",
            "(assert (MenuItem \"C\" 1))",
            "(assert (MenuItem \"D\" (/ 7 3)))",
            "(assert (MenuItem \"E\" 7))"
        ]
    },
    {
        "id": 12118,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 0 (+ (Pow x 2) y)))",
            "(assert (= xy (* x y)))",
            "(assert (Not (True ?_id_9_13)))",
            "(assert (MenuItem \"A\" (= (Pow x 2) y)))",
            "(assert (MenuItem \"B\" (= xy y)))",
            "(assert (MenuItem \"C\" (= x (/ y x))))",
            "(assert (MenuItem \"D\" (= (Pow x 3) (Pow y 2))))",
            "(assert (MenuItem \"E\" (= (Pow x 4) (Pow y 2))))"
        ]
    },
    {
        "id": 12122,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Average _id_4_6) ?_id_25_29))",
            "(assert (Between (Sum _id_4_6) 53 57))",
            "(assert (IsPrototype _gen10 _id_4_6))",
            "(assert (SizeIs _id_4_6 4))",
            "(assert (MenuItem \"A\" (+ 11 (/ 1 2))))",
            "(assert (MenuItem \"B\" 12))",
            "(assert (MenuItem \"C\" (+ 12 (/ 1 2))))",
            "(assert (MenuItem \"D\" 13))",
            "(assert (MenuItem \"E\" 14))"
        ]
    },
    {
        "id": 12123,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= x (- 0 3)))",
            "(assert (= xy (* x y)))",
            "(assert (= y 9))",
            "(assert (Not (= ?_id_10_11 (Abs (- (Pow xy (/ 1 3)) y)))))",
            "(assert (MenuItem \"A\" (- 0 12)))",
            "(assert (MenuItem \"B\" 0))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 12))",
            "(assert (MenuItem \"E\" 36))"
        ]
    },
    {
        "id": 12125,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Pow x 2) k))",
            "(assert (= ?_id_14_18 _id_20_24))",
            "(assert (= _id_20_24 k))",
            "(assert (IsInteger k))",
            "(assert (IsInteger x))",
            "(assert (MenuItem \"A\" 13))",
            "(assert (MenuItem \"B\" 14))",
            "(assert (MenuItem \"C\" 15))",
            "(assert (MenuItem \"D\" 16))",
            "(assert (MenuItem \"E\" 17))"
        ]
    },
    {
        "id": 12128,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= 3 (Pow x (/ 1 2))))",
            "(assert (Not (= ?_id_16_17 (Pow x 2))))",
            "(assert (MenuItem \"A\" (/ 1 3)))",
            "(assert (MenuItem \"B\" 6))",
            "(assert (MenuItem \"C\" 9))",
            "(assert (MenuItem \"D\" 12))",
            "(assert (MenuItem \"E\" 81))"
        ]
    },
    {
        "id": 12147,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= (Sum _id_0_4) 80))",
            "(assert (= ?_id_10_11 (Min _gen11)))",
            "(assert (Consecutive \"odd\" _id_0_4))",
            "(assert (HasPrototype _gen11 _gen5))",
            "(assert (IsInteger _gen18))",
            "(assert (IsPrototype _gen18 _id_0_4))",
            "(assert (MemberOf _gen5 _id_0_4))",
            "(assert (SizeIs _id_0_4 4))"
        ]
    },
    {
        "id": 12153,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= (+ ?_id_0_2 4) (- 19 4))))",
            "(assert (MenuItem \"A\" 10))",
            "(assert (MenuItem \"B\" 11))",
            "(assert (MenuItem \"C\" 15))",
            "(assert (MenuItem \"D\" 19))",
            "(assert (MenuItem \"E\" 27))"
        ]
    },
    {
        "id": 12156,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* (- d 1) (- d 2)) ?_id_21_25))",
            "(assert (IsInteger d))",
            "(assert (Odd d))",
            "(assert (Positive d))",
            "(assert (MenuItem \"A\" 12))",
            "(assert (MenuItem \"B\" 13))",
            "(assert (MenuItem \"C\" 14))",
            "(assert (MenuItem \"D\" 15))",
            "(assert (MenuItem \"E\" 16))"
        ]
    },
    {
        "id": 12164,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 16 (Pow (- x 2) 2)))",
            "(assert (= ?_id_11_15 x))",
            "(assert (MenuItem \"A\" (- 0 6)))",
            "(assert (MenuItem \"B\" (- 0 4)))",
            "(assert (MenuItem \"C\" (- 0 2)))",
            "(assert (MenuItem \"D\" 2))",
            "(assert (MenuItem \"E\" 8))"
        ]
    },
    {
        "id": 12172,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (/ (- x d) cx) (/ 5 2)))",
            "(assert (= _id_29_33 x))",
            "(assert (= cd (* c d)))",
            "(assert (= cx (* c x)))",
            "(assert (Not (= ?_id_27_28 _id_29_33)))",
            "(assert (Positive c))",
            "(assert (Positive d))",
            "(assert (MenuItem \"A\" (+ (* 10 (- 5 d)) c)))",
            "(assert (MenuItem \"B\" (- (* 10 (+ 5 d)) c)))",
            "(assert (MenuItem \"C\" (* 5 cd)))",
            "(assert (MenuItem \"D\" (- 0 (/ (* 2 d) (- (* 5 c) 2)))))",
            "(assert (MenuItem \"E\" (/ (* 2 d) (- (* 5 c) 2))))"
        ]
    },
    {
        "id": 12176,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (* (+ a (* 2 b)) (Pow k (/ 1 2))) ?_id_0))",
            "(assert (= (+ (* 2 a) (* 4 b)) (Pow k (/ 1 2))))",
            "(assert (MenuItem \"A\" (* 3 k)))",
            "(assert (MenuItem \"B\" (* 2 k)))",
            "(assert (MenuItem \"C\" k))",
            "(assert (MenuItem \"D\" (/ k 2)))",
            "(assert (MenuItem \"E\" (/ k 4)))"
        ]
    },
    {
        "id": 12178,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= (Average _id_8_12) m))",
            "(assert (Consecutive \"odd\" _id_8_12))",
            "(assert (HasPrototype _gen20 ?_id_0))",
            "(assert (IsInteger ?_id_0))",
            "(assert (IsInteger _gen21))",
            "(assert (IsPrototype _gen21 _id_8_12))",
            "(assert (Odd ?_id_0))",
            "(assert (SizeIs _id_8_12 6))",
            "(assert (MenuItem \"A\" (- (* 6 m) 6)))",
            "(assert (MenuItem \"B\" (- (* 2 m) 4)))",
            "(assert (MenuItem \"C\" (- m 6)))",
            "(assert (MenuItem \"D\" (- m 5)))",
            "(assert (MenuItem \"E\" (- m 4)))"
        ]
    },
    {
        "id": 12184,
        "logicalForm": [
            "(assert (Strategy \"CheckSatisfiable\"))",
            "(assert (= 0 (* (- x 2) (+ x 5))))",
            "(assert (= ?_id_0_1 x))",
            "(assert (MenuItem \"A\" (- 0 5)))",
            "(assert (MenuItem \"B\" (- 0 2)))",
            "(assert (MenuItem \"C\" (- 0 5)))",
            "(assert (MenuItem \"C\" 2))",
            "(assert (MenuItem \"D\" (- 0 2)))",
            "(assert (MenuItem \"D\" 5))",
            "(assert (MenuItem \"E\" 2))",
            "(assert (MenuItem \"E\" 5))"
        ]
    },
    {
        "id": 12212,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_13_14 (+ (* 9 (/ 1 2)) (Pow 9 (/ 1 2))))))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 6))",
            "(assert (MenuItem \"C\" 7.5))",
            "(assert (MenuItem \"D\" 9))",
            "(assert (MenuItem \"E\" 9.9))"
        ]
    },
    {
        "id": 12243,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= ab (* a b)))",
            "(assert (IsInteger a))",
            "(assert (Nonzero a))",
            "(assert (Not (IsInteger ?_id_13_17)))",
            "(assert (Not (IsInteger b)))",
            "(assert (MenuItem \"A\" (+ a b)))",
            "(assert (MenuItem \"B\" (- a b)))",
            "(assert (MenuItem \"C\" ab))",
            "(assert (MenuItem \"D\" (- (* 2 a) b)))",
            "(assert (MenuItem \"E\" (/ b a)))"
        ]
    },
    {
        "id": 12244,
        "logicalForm": [
            "(assert (Strategy \"DirectSolution\"))",
            "(assert (= ?_id_25_26 (+ x y)))",
            "(assert (Equivalent (Elements (/ x 14) (/ 5 y) (/ 4 8))))"
        ]
    },
    {
        "id": 12247,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (= (* 3 x) 36))",
            "(assert (Not (= (/ x 3) ?_id_0)))",
            "(assert (MenuItem \"A\" 3))",
            "(assert (MenuItem \"B\" 4))",
            "(assert (MenuItem \"C\" 6))",
            "(assert (MenuItem \"D\" 9))",
            "(assert (MenuItem \"E\" 12))"
        ]
    },
    {
        "id": 12249,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Not (= ?_id_17_21 (+ 4 (/ (- x 6) 3)))))",
            "(assert (MenuItem \"A\" (/ (- x 2) 3)))",
            "(assert (MenuItem \"B\" (/ (+ x 2) 3)))",
            "(assert (MenuItem \"C\" (/ (- x 6) 3)))",
            "(assert (MenuItem \"D\" (/ (+ x 6) 3)))",
            "(assert (MenuItem \"E\" (/ (+ (* 6 x) 4) 3)))"
        ]
    },
    {
        "id": 12251,
        "logicalForm": [
            "(assert (Strategy \"CheckUnsatisfiable\"))",
            "(assert (Equivalent (Elements a (* 2 b) (* 3 c))))",
            "(assert (Not (= ?_id_9_10 (Average (Elements a b c)))))",
            "(assert (MenuItem \"A\" (/ a 6)))",
            "(assert (MenuItem \"B\" (/ (* 2 a) 11)))",
            "(assert (MenuItem \"C\" (/ (* 6 a) 5)))",
            "(assert (MenuItem \"D\" (/ (* 11 a) 18)))",
            "(assert (MenuItem \"E\" (/ (* 2 a) 3)))"
        ]
    }
]